//                     Copyright (c) 2007 - 2018 Synopsys, Inc.
//    This software and the associated documentation are proprietary to Synopsys,
//  Inc. This software may only be used in accordance with the terms and conditions
//  of a written license agreement with Synopsys, Inc. All other use, reproduction,
//             or distribution of this software is strictly prohibited.
//
// MAX TB Test Protocol File, generated by MAX TB Version O-2018.06-SP1
// Fri Jan  7 05:59:25 2022
// Module under test: async_fifo
// Generated from original STIL file : "./patterns/async_fifo_TM4.stil"
// STIL file version: "1.0"
// Enhanced Runtime Version: use <sim_exec> +tmax_help for available runtime options
// Simulation mode: default serial simulation

`define TDATA_FILE "/home/rfic/Desktop/adapted/async_fifo/tmax/./max_sim/serial/TM4/pat_serial_tb.dat"
`ifndef XTB_DUT_HIER 
  `define XTB_DUT_HIER dut
`endif
`timescale 1ns/1ns

// OPCODE DEFINITION
`define EndPat 0
`define IncPat 1
`define SetPat 2
`define WFTStmt 3
`define ConditionStmt 4
`define VectorStmt 5
`define FixedStmt 6
`define GenLoopStmt 7
`define EndGenLoopStmt 8
`define GenTestSetupStmt 9
`define EndGenTestSetupStmt 10
`define SetForceSI 11
`define SetValidStrobe 12
`define AnnotationStmt 13
`define test_setupStmt 14
`define load_unloadStmt 15
`define multiclock_captureStmt 16

// SIGS DEFINITION
`define wclk 0
`define wrst_n 1
`define wen 2
`define wptr_clr 3
`define \wdata[7]  4
`define \wdata[6]  5
`define \wdata[5]  6
`define \wdata[4]  7
`define \wdata[3]  8
`define \wdata[2]  9
`define \wdata[1]  10
`define \wdata[0]  11
`define rclk 12
`define rrst_n 13
`define ren 14
`define rptr_clr 15
`define \near_full_mrgn[4]  16
`define \near_full_mrgn[3]  17
`define \near_full_mrgn[2]  18
`define \near_full_mrgn[1]  19
`define \near_full_mrgn[0]  20
`define \near_empty_mrgn[4]  21
`define \near_empty_mrgn[3]  22
`define \near_empty_mrgn[2]  23
`define \near_empty_mrgn[1]  24
`define \near_empty_mrgn[0]  25
`define test_si 26
`define test_se 27
`define atpg_mode 28
`define test_mode 29
`define test_clk 30
`define test_mode1 31
`define test_si_1 32
`define test_si_2 33
`define test_si_3 34
`define \rdata[7]  35
`define \rdata[6]  36
`define \rdata[5]  37
`define \rdata[4]  38
`define \rdata[3]  39
`define \rdata[2]  40
`define \rdata[1]  41
`define \rdata[0]  42
`define full 43
`define empty 44
`define near_full 45
`define near_empty 46
`define over_flow 47
`define under_flow 48
`define test_so 49
`define test_so_1 50
`define test_so_2 51
`define test_so_3 52
`define _pi 53
`define all_inputs 54
`define _po 55
`define _si 56
`define all_outputs 57
`define _clk 58
`define _so 59

// WFTS DEFINITION
`define _multiclock_capture_WFT_ 0
`define _default_WFT_ 1
`define MAX_PART 0

`define MAXTB_HEADER " MAX TB Version O-2018.06-SP1\n Test Protocol File generated from original file \"./patterns/async_fifo_TM4.stil\"\n STIL file version: 1.0"
`define MAXTB_H_S "#############################################################################"


module /* maxtb */ async_fifo_test ();
   parameter NSTMTS = 17; // number of all stmts
   parameter DFSHIFTS = 0; // (default) number of serial shifts in parallel scan mode
   parameter NAMELENGTH = 200; // max length of names reported in fails
   parameter FILELENGTH = 1024; // max length for file names 
   parameter MAXCHLEN = 9, NCHAINS = 24; // MAXCHLEN for serial
   parameter NINPUTS = 35, NOUTPUTS = 18, CUM_WIDTH=170;
   parameter NSIS = 4, NSOUTS = 4;
   parameter WFT_IDS = 2, SIG_IDS = 60, SIG_IDS_W = 6, MAX_WIDTH = 35, MAX_SIGW = 1;
   parameter PARSERINC = 9; 
   parameter SYNC_LATENCY = 3; 
   parameter PRTIME = 0.000000; 
   integer xtb_sim_mode; // simulation modes: xtb_sim_mode=0 -> serial, xtb_sim_mode=1 -> parallel (default);
   integer nbfails, abit, cbit;
   integer prev_error; // flag for tracking displayed error banner
   integer loads;        // number of load_unloads for current pattern
   integer prev_pat;     // previous pattern number;
   integer rep_pat; // report pattern progress every Nth pattern
   integer verbose;      // message verbosity level
   integer debug;      // enable debug level
   integer test_setup_runs; // counts the number of executed test_setups
   integer test_setup_only_once; // flag to trigger only one execution of test_setup
   integer data_i, n, cur_pat, start_pat, end_pat, last_pat, total_pats, csci, fsci, cur_stmt;
   integer v_count, v_count_per_pat;  // track the cycle count and cycle/pattern count (helpful for the simulator GUI)
   integer SSHIFTS;
   integer diagf, diagm;
   integer sertmg;
   integer the_wft_id, wft_id_s;
   integer ser_pats;
   integer first_pat;
   event start_part, end_part;
   `define NBRTOPS 7
   integer csim_op;
   reg [32*8:1] RT_OPS [0:`NBRTOPS];
   integer      rt_ops [0:`NBRTOPS-1];
   integer      tdfm;
   integer lp_addr, lp_count, lp_max;
   reg [0:(8*FILELENGTH)-1] TDATA_FILE;

   reg [MAX_SIGW*(NINPUTS+NOUTPUTS)-1:0] ALLINSIGS, ALLOUTSIGS;
   reg [MAX_SIGW*(NINPUTS+NOUTPUTS)-1:0] TMPINSIGS_V,TMPINSIGS_T,TMPINSIGS_V_S,TMPINSIGS_T_S;
   reg [MAX_SIGW*(NINPUTS+NOUTPUTS)-1:0] TMPOUTSIGS_V,TMPOUTSIGS_T,TMPOUTSIGS_V_S,TMPOUTSIGS_T_S;
   reg [NINPUTS+NOUTPUTS-1:0] ALLINSIGIDS, ALLOUTSIGIDS, ALLINSIGIDS_S, ALLOUTSIGIDS_S;
   reg [NSTMTS-1:0] opcode, popcode;
   event force_scells;
   event strobe_scells;
   event release_scells;
   reg [75:0] memel, memall [1:966];
   reg [0:MAXCHLEN-1] LOD, LOAD[0:NCHAINS-1];
   reg [0:MAXCHLEN-1] UNL, UNLOAD[0:NCHAINS-1];
   reg [0:MAXCHLEN-1] UNLM;
   reg [0:MAXCHLEN-1] SERIALM;
   reg [0:MAXCHLEN-1] CH_INPINV[0:NCHAINS-1], CH_OUTINV[0:NCHAINS-1];
   wire [0:NCHAINS-1] SCANOUT;
   reg [0:MAXCHLEN-1] CHOUT, CHAINOUT[0:NCHAINS-1];
   reg [0:MAXCHLEN-1] CHAINOUT0,  CHAINOUT1,  CHAINOUT2,  CHAINOUT3,  CHAINOUT4,  CHAINOUT5,  CHAINOUT6,  CHAINOUT7,  CHAINOUT8,  CHAINOUT9,  CHAINOUT10,  CHAINOUT11,  CHAINOUT12,  CHAINOUT13,  CHAINOUT14,  CHAINOUT15,  CHAINOUT16,  CHAINOUT17,  CHAINOUT18,  CHAINOUT19,  CHAINOUT20,  CHAINOUT21,  CHAINOUT22,  CHAINOUT23;
   reg [0:MAXCHLEN-1] LOD0,  LOD1,  LOD2,  LOD3,  LOD4,  LOD5,  LOD6,  LOD7,  LOD8,  LOD9,  LOD10,  LOD11,  LOD12,  LOD13,  LOD14,  LOD15,  LOD16,  LOD17,  LOD18,  LOD19,  LOD20,  LOD21,  LOD22,  LOD23;
   reg [5:0] the_sids [0:SIG_IDS-1];
   reg [MAX_WIDTH-1:0] the_sigs [0:SIG_IDS-1];
   reg strobe_en;
   reg [SIG_IDS-1:0] sid_args ;
   reg [2*CUM_WIDTH-1:0] sval_args;
   reg [8*NAMELENGTH-1:0]  SignalIDName [0:59];
   reg [2:0]  SignalIDType [0:59];
   reg [5:0]  SignalIDWidth [0:59];
   reg [(8*NAMELENGTH-1):0]  WFTIDName [0:1];
   reg [0:(8*NAMELENGTH-1)] StmtNames [0:NSTMTS];
   reg [0:(8*FILELENGTH)-1] diag_file;
   reg [0:MAXCHLEN-1] \chout_test_so , \chout_test_so_1 , \chout_test_so_2 , \chout_test_so_3 ;
   reg [0:MAXCHLEN-1] LODCHP0 , LODCHP1, LODCHP2, LODCHP3, LODCHP4, LODCHP5, LODCHP6, LODCHP7, LODCHP8, LODCHP9, LODCHP10, LODCHP11, LODCHP12, LODCHP13, LODCHP14, LODCHP15, LODCHP16, LODCHP17, LODCHP18, LODCHP19, LODCHP20, LODCHP21, LODCHP22, LODCHP23;
   reg [0:MAXCHLEN-1] UNLODCHP0, UNLODCHP1, UNLODCHP2, UNLODCHP3, UNLODCHP4, UNLODCHP5, UNLODCHP6, UNLODCHP7, UNLODCHP8, UNLODCHP9, UNLODCHP10, UNLODCHP11, UNLODCHP12, UNLODCHP13, UNLODCHP14, UNLODCHP15, UNLODCHP16, UNLODCHP17, UNLODCHP18, UNLODCHP19, UNLODCHP20, UNLODCHP21, UNLODCHP22, UNLODCHP23;

   reg wclk_con ;
   reg wrst_n_con ;
   reg wen_con ;
   reg wptr_clr_con ;
   reg \wdata[7]  ;
   reg \wdata[6]  ;
   reg \wdata[5]  ;
   reg \wdata[4]  ;
   reg \wdata[3]  ;
   reg \wdata[2]  ;
   reg \wdata[1]  ;
   reg \wdata[0]  ;
   reg rclk_con ;
   reg rrst_n_con ;
   reg ren_con ;
   reg rptr_clr_con ;
   reg \near_full_mrgn[4]  ;
   reg \near_full_mrgn[3]  ;
   reg \near_full_mrgn[2]  ;
   reg \near_full_mrgn[1]  ;
   reg \near_full_mrgn[0]  ;
   reg \near_empty_mrgn[4]  ;
   reg \near_empty_mrgn[3]  ;
   reg \near_empty_mrgn[2]  ;
   reg \near_empty_mrgn[1]  ;
   reg \near_empty_mrgn[0]  ;
   reg test_si_con ;
   reg test_se_con ;
   reg atpg_mode_con ;
   reg test_mode_con ;
   reg test_clk_con ;
   reg test_mode1_con ;
   reg test_si_1_con ;
   reg test_si_2_con ;
   reg test_si_3_con ;
   wire \rdata[7]  ;
   wire \rdata[6]  ;
   wire \rdata[5]  ;
   wire \rdata[4]  ;
   wire \rdata[3]  ;
   wire \rdata[2]  ;
   wire \rdata[1]  ;
   wire \rdata[0]  ;
   wire full_con ;
   wire empty_con ;
   wire near_full_con ;
   wire near_empty_con ;
   wire over_flow_con ;
   wire under_flow_con ;
   wire test_so_con ;
   wire test_so_1_con ;
   wire test_so_2_con ;
   wire test_so_3_con ;
   reg [0:NSIS-1] net_si;
   wire [0:NCHAINS-1] dec_dout;
   reg [0:NCHAINS-1] com_din;
   wire [0:NSOUTS-1] net_so;

   wire [0:(8*NAMELENGTH-1)] cur_StmtName;
   assign cur_StmtName = StmtNames[cur_stmt] ;


   async_fifo dut ( 
     .wclk ( wclk_con ),
     .wrst_n ( wrst_n_con ),
     .wen ( wen_con ),
     .wptr_clr ( wptr_clr_con ),
     .wdata ( { \wdata[7] ,
        \wdata[6] ,
        \wdata[5] ,
        \wdata[4] ,
        \wdata[3] ,
        \wdata[2] ,
        \wdata[1] ,
        \wdata[0] } ),
     .rclk ( rclk_con ),
     .rrst_n ( rrst_n_con ),
     .ren ( ren_con ),
     .rptr_clr ( rptr_clr_con ),
     .near_full_mrgn ( { \near_full_mrgn[4] ,
        \near_full_mrgn[3] ,
        \near_full_mrgn[2] ,
        \near_full_mrgn[1] ,
        \near_full_mrgn[0] } ),
     .near_empty_mrgn ( { \near_empty_mrgn[4] ,
        \near_empty_mrgn[3] ,
        \near_empty_mrgn[2] ,
        \near_empty_mrgn[1] ,
        \near_empty_mrgn[0] } ),
     .test_si ( test_si_con ),
     .test_se ( test_se_con ),
     .atpg_mode ( atpg_mode_con ),
     .test_mode ( test_mode_con ),
     .test_clk ( test_clk_con ),
     .test_mode1 ( test_mode1_con ),
     .test_si_1 ( test_si_1_con ),
     .test_si_2 ( test_si_2_con ),
     .test_si_3 ( test_si_3_con ),
     .rdata ( { \rdata[7] ,
        \rdata[6] ,
        \rdata[5] ,
        \rdata[4] ,
        \rdata[3] ,
        \rdata[2] ,
        \rdata[1] ,
        \rdata[0] } ),
     .full ( full_con ),
     .empty ( empty_con ),
     .near_full ( near_full_con ),
     .near_empty ( near_empty_con ),
     .over_flow ( over_flow_con ),
     .under_flow ( under_flow_con ),
     .test_so ( test_so_con ),
     .test_so_1 ( test_so_1_con ),
     .test_so_2 ( test_so_2_con ),
     .test_so_3 ( test_so_3_con )
  );


   task save_context;
     begin
       wft_id_s = the_wft_id;
       TMPINSIGS_V_S = TMPINSIGS_V;
       TMPOUTSIGS_V_S = TMPOUTSIGS_V;
       TMPINSIGS_T_S = TMPINSIGS_T;
       TMPOUTSIGS_T_S = TMPOUTSIGS_T;
       ALLOUTSIGIDS_S = ALLOUTSIGIDS;
       ALLINSIGIDS_S = ALLINSIGIDS;
     end
   endtask 

   task restore_context;
     begin
       the_wft_id = wft_id_s;
       TMPINSIGS_V = TMPINSIGS_V_S;
       TMPOUTSIGS_V = TMPOUTSIGS_V_S;
       TMPINSIGS_T = TMPINSIGS_T_S;
       TMPOUTSIGS_T = TMPOUTSIGS_T_S;
       ALLOUTSIGIDS = ALLOUTSIGIDS_S;
       ALLINSIGIDS = ALLINSIGIDS_S;
     end
   endtask 

   task resolve_signal;
     input reg [5:0] sid;
   begin
     if (SignalIDType[sid] != 3) the_sids[0] = sid;
     else begin
       case (sid)
         'd53: begin // _pi
                 the_sids[34] = 28; the_sids[33] = 25; the_sids[32] = 24; the_sids[31] = 23; the_sids[30] = 22; the_sids[29] = 21; the_sids[28] = 20; the_sids[27] = 19; the_sids[26] = 18; the_sids[25] = 17; the_sids[24] = 16; the_sids[23] = 12; the_sids[22] = 14; the_sids[21] = 15; the_sids[20] = 13; the_sids[19] = 30; the_sids[18] = 29; the_sids[17] = 27; the_sids[16] = 26; the_sids[15] = 0; the_sids[14] = 11; the_sids[13] = 10; the_sids[12] = 9; the_sids[11] = 8; the_sids[10] = 7; the_sids[9] = 6; the_sids[8] = 5; the_sids[7] = 4; the_sids[6] = 2; the_sids[5] = 3; the_sids[4] = 1; the_sids[3] = 31; the_sids[2] = 32; the_sids[1] = 33;
                 the_sids[0] = 34;
               end
         'd54: begin // all_inputs
                 the_sids[34] = 28; the_sids[33] = 25; the_sids[32] = 24; the_sids[31] = 23; the_sids[30] = 22; the_sids[29] = 21; the_sids[28] = 20; the_sids[27] = 19; the_sids[26] = 18; the_sids[25] = 17; the_sids[24] = 16; the_sids[23] = 12; the_sids[22] = 14; the_sids[21] = 15; the_sids[20] = 13; the_sids[19] = 30; the_sids[18] = 29; the_sids[17] = 27; the_sids[16] = 26; the_sids[15] = 0; the_sids[14] = 11; the_sids[13] = 10; the_sids[12] = 9; the_sids[11] = 8; the_sids[10] = 7; the_sids[9] = 6; the_sids[8] = 5; the_sids[7] = 4; the_sids[6] = 2; the_sids[5] = 3; the_sids[4] = 1; the_sids[3] = 31; the_sids[2] = 32; the_sids[1] = 33;
                 the_sids[0] = 34;
               end
         'd55: begin // _po
                 the_sids[17] = 44; the_sids[16] = 43; the_sids[15] = 46; the_sids[14] = 45; the_sids[13] = 47; the_sids[12] = 42; the_sids[11] = 41; the_sids[10] = 40; the_sids[9] = 39; the_sids[8] = 38; the_sids[7] = 37; the_sids[6] = 36; the_sids[5] = 35; the_sids[4] = 49; the_sids[3] = 48; the_sids[2] = 50; the_sids[1] = 51;
                 the_sids[0] = 52;
               end
         'd56: begin // _si
                 the_sids[3] = 26; the_sids[2] = 32; the_sids[1] = 33;
                 the_sids[0] = 34;
               end
         'd57: begin // all_outputs
                 the_sids[17] = 44; the_sids[16] = 43; the_sids[15] = 46; the_sids[14] = 45; the_sids[13] = 47; the_sids[12] = 42; the_sids[11] = 41; the_sids[10] = 40; the_sids[9] = 39; the_sids[8] = 38; the_sids[7] = 37; the_sids[6] = 36; the_sids[5] = 35; the_sids[4] = 49; the_sids[3] = 48; the_sids[2] = 50; the_sids[1] = 51;
                 the_sids[0] = 52;
               end
         'd58: begin // _clk
                 the_sids[2] = 13; the_sids[1] = 30;
                 the_sids[0] = 1;
               end
         'd59: begin // _so
                 the_sids[3] = 49; the_sids[2] = 50; the_sids[1] = 51;
                 the_sids[0] = 52;
               end
          default: begin $display("\nXTB Error: unrecognized signal id %d (valid range is 0..%d). Exiting...",sid, SIG_IDS); $finish; end
       endcase
     end
   end
   endtask

   task get_stb_sig;
     input reg [5:0] sid ;
     output reg [MAX_WIDTH-1:0] strsig;
   begin
     case (sid)
       'd35:	strsig[0:0] = 	\rdata[7]  ;
       'd36:	strsig[0:0] = 	\rdata[6]  ;
       'd37:	strsig[0:0] = 	\rdata[5]  ;
       'd38:	strsig[0:0] = 	\rdata[4]  ;
       'd39:	strsig[0:0] = 	\rdata[3]  ;
       'd40:	strsig[0:0] = 	\rdata[2]  ;
       'd41:	strsig[0:0] = 	\rdata[1]  ;
       'd42:	strsig[0:0] = 	\rdata[0]  ;
       'd43:	strsig[0:0] = 	full_con ;
       'd44:	strsig[0:0] = 	empty_con ;
       'd45:	strsig[0:0] = 	near_full_con ;
       'd46:	strsig[0:0] = 	near_empty_con ;
       'd47:	strsig[0:0] = 	over_flow_con ;
       'd48:	strsig[0:0] = 	under_flow_con ;
       'd49:	strsig[0:0] = 	test_so_con ;
       'd50:	strsig[0:0] = 	test_so_1_con ;
       'd51:	strsig[0:0] = 	test_so_2_con ;
       'd52:	strsig[0:0] = 	test_so_3_con ;
       default: begin $display("\nXTB Error: unrecognized output signal id %d. Exiting...",sid); $finish; end
     endcase
   end
   endtask

   task set_force_sig;
     input reg [SIG_IDS-1:0] sid ;
   begin
     case (sid)
       'd0: wclk_con 	= ALLINSIGS[sid];
       'd1: wrst_n_con 	= ALLINSIGS[sid];
       'd2: wen_con 	= ALLINSIGS[sid];
       'd3: wptr_clr_con 	= ALLINSIGS[sid];
       'd4: \wdata[7]  	= ALLINSIGS[sid];
       'd5: \wdata[6]  	= ALLINSIGS[sid];
       'd6: \wdata[5]  	= ALLINSIGS[sid];
       'd7: \wdata[4]  	= ALLINSIGS[sid];
       'd8: \wdata[3]  	= ALLINSIGS[sid];
       'd9: \wdata[2]  	= ALLINSIGS[sid];
       'd10: \wdata[1]  	= ALLINSIGS[sid];
       'd11: \wdata[0]  	= ALLINSIGS[sid];
       'd12: rclk_con 	= ALLINSIGS[sid];
       'd13: rrst_n_con 	= ALLINSIGS[sid];
       'd14: ren_con 	= ALLINSIGS[sid];
       'd15: rptr_clr_con 	= ALLINSIGS[sid];
       'd16: \near_full_mrgn[4]  	= ALLINSIGS[sid];
       'd17: \near_full_mrgn[3]  	= ALLINSIGS[sid];
       'd18: \near_full_mrgn[2]  	= ALLINSIGS[sid];
       'd19: \near_full_mrgn[1]  	= ALLINSIGS[sid];
       'd20: \near_full_mrgn[0]  	= ALLINSIGS[sid];
       'd21: \near_empty_mrgn[4]  	= ALLINSIGS[sid];
       'd22: \near_empty_mrgn[3]  	= ALLINSIGS[sid];
       'd23: \near_empty_mrgn[2]  	= ALLINSIGS[sid];
       'd24: \near_empty_mrgn[1]  	= ALLINSIGS[sid];
       'd25: \near_empty_mrgn[0]  	= ALLINSIGS[sid];
       'd26: test_si_con 	= ALLINSIGS[sid];
       'd27: test_se_con 	= ALLINSIGS[sid];
       'd28: atpg_mode_con 	= ALLINSIGS[sid];
       'd29: test_mode_con 	= ALLINSIGS[sid];
       'd30: test_clk_con 	= ALLINSIGS[sid];
       'd31: test_mode1_con 	= ALLINSIGS[sid];
       'd32: test_si_1_con 	= ALLINSIGS[sid];
       'd33: test_si_2_con 	= ALLINSIGS[sid];
       'd34: test_si_3_con 	= ALLINSIGS[sid];
       default: begin $display("\nXTB Error: unrecognized (input) signal id %d (valid range is 0..%d). Exiting...",sid, SIG_IDS-1); $finish; end
     endcase
   end
   endtask 

   always  begin: force_sigs_p
     reg [SIG_IDS-1:0] sid; 
     reg [MAX_SIGW-1:0] sig;
     fork
        forever @(ALLINSIGS[0]) set_force_sig('d`wclk );
        forever @(ALLINSIGS[1]) set_force_sig('d`wrst_n );
        forever @(ALLINSIGS[2]) set_force_sig('d`wen );
        forever @(ALLINSIGS[3]) set_force_sig('d`wptr_clr );
        forever @(ALLINSIGS[4]) set_force_sig('d`\wdata[7]  );
        forever @(ALLINSIGS[5]) set_force_sig('d`\wdata[6]  );
        forever @(ALLINSIGS[6]) set_force_sig('d`\wdata[5]  );
        forever @(ALLINSIGS[7]) set_force_sig('d`\wdata[4]  );
        forever @(ALLINSIGS[8]) set_force_sig('d`\wdata[3]  );
        forever @(ALLINSIGS[9]) set_force_sig('d`\wdata[2]  );
        forever @(ALLINSIGS[10]) set_force_sig('d`\wdata[1]  );
        forever @(ALLINSIGS[11]) set_force_sig('d`\wdata[0]  );
        forever @(ALLINSIGS[12]) set_force_sig('d`rclk );
        forever @(ALLINSIGS[13]) set_force_sig('d`rrst_n );
        forever @(ALLINSIGS[14]) set_force_sig('d`ren );
        forever @(ALLINSIGS[15]) set_force_sig('d`rptr_clr );
        forever @(ALLINSIGS[16]) set_force_sig('d`\near_full_mrgn[4]  );
        forever @(ALLINSIGS[17]) set_force_sig('d`\near_full_mrgn[3]  );
        forever @(ALLINSIGS[18]) set_force_sig('d`\near_full_mrgn[2]  );
        forever @(ALLINSIGS[19]) set_force_sig('d`\near_full_mrgn[1]  );
        forever @(ALLINSIGS[20]) set_force_sig('d`\near_full_mrgn[0]  );
        forever @(ALLINSIGS[21]) set_force_sig('d`\near_empty_mrgn[4]  );
        forever @(ALLINSIGS[22]) set_force_sig('d`\near_empty_mrgn[3]  );
        forever @(ALLINSIGS[23]) set_force_sig('d`\near_empty_mrgn[2]  );
        forever @(ALLINSIGS[24]) set_force_sig('d`\near_empty_mrgn[1]  );
        forever @(ALLINSIGS[25]) set_force_sig('d`\near_empty_mrgn[0]  );
        forever @(ALLINSIGS[26]) set_force_sig('d`test_si );
        forever @(ALLINSIGS[27]) set_force_sig('d`test_se );
        forever @(ALLINSIGS[28]) set_force_sig('d`atpg_mode );
        forever @(ALLINSIGS[29]) set_force_sig('d`test_mode );
        forever @(ALLINSIGS[30]) set_force_sig('d`test_clk );
        forever @(ALLINSIGS[31]) set_force_sig('d`test_mode1 );
        forever @(ALLINSIGS[32]) set_force_sig('d`test_si_1 );
        forever @(ALLINSIGS[33]) set_force_sig('d`test_si_2 );
        forever @(ALLINSIGS[34]) set_force_sig('d`test_si_3 );
     join
   end

   task measure_out_sig;
     input reg [SIG_IDS-1:0] sid ;
     input reg [MAX_WIDTH-1:0] xsig;
     input integer  stmtid;
     reg [MAX_WIDTH-1:0] csig;
     integer errshown, abit, cpat;
   begin
     errshown = 0;
     cpat = cur_pat < 0 ? 0 : cur_pat;
     get_stb_sig(sid,csig);
     for (abit = 0; abit < SignalIDWidth[sid]; abit = abit + 1) begin
       if (xsig[abit] !== 1'bx) begin
         if (xsig[abit] !== csig[abit]) begin
           if (errshown == 0) $display(">>>  Error during %0s pattern %0d", StmtNames[stmtid], cpat);
           if (SignalIDWidth[sid] <= 1) begin 
             $display(">>>  \tAt T=%0t, V=%0d, exp=%b, got=%b, signal %0s", $time, v_count, xsig[abit], csig[abit], SignalIDName[sid]);
             if (diagf) begin 
               if (diagm==2) $fdisplay(diagf, "  C %0s %0d (exp=%b, got=%b)", SignalIDName[sid], v_count, xsig[abit], csig[abit]);
               else $fdisplay(diagf, "  %0d %0s (exp=%b, got=%b)", cpat, SignalIDName[sid], xsig[abit], csig[abit]);
             end 
           end 
           else begin 
             $display(">>>  \tAt T=%0t, V=%0d, exp=%b, got=%b, signal %0s[%0d]", $time, v_count, xsig[abit], csig[abit], SignalIDName[sid], abit);
             if (diagf) begin 
               if (diagm==2) $fdisplay(diagf, "  C %0s[%0d] %0d (exp=%b, got=%b)", SignalIDName[sid], abit, v_count, xsig[abit], csig[abit]);
               else $fdisplay(diagf, "  %0d %0s[%d] (exp=%b, got=%b)", cpat, SignalIDName[sid], abit, xsig[abit], csig[abit]);
             end 
           end 
           nbfails = nbfails + 1;
           errshown = 1;
         end 
       end 
     end 
   end 
   endtask

   task measure_scan_out;
     input reg [SIG_IDS-1:0] sid ;
     input reg [MAX_WIDTH-1:0] xsig;
     input integer  chain;
     reg [MAX_WIDTH-1:0] csig;
     integer errshown, patoff;
   begin
     errshown = 0;
     get_stb_sig(sid, csig);
     if ((xsig[0] !==1'bx) && (xsig[0] !== csig[0])) begin
       patoff = (loads > 1 || cur_pat <= 0) ? 0 : 1;
       if (prev_error != cur_pat) begin
         if (cur_pat <= 0 || cur_pat == last_pat && loads > 1) begin
           $display(">>>  Error during scan pattern %0d %s", (cur_pat < 0) ? 0 : cur_pat,  (cur_pat == last_pat) ? "(detected from final pattern unload)" : "");
         end
         else begin
           if (loads > 1) $display(">>>  Error during scan pattern %0d (detected from %0d load/unload)", cur_pat, loads);
           else begin $display(">>>  Error during scan pattern %0d (detected from unload of pattern %0d)", cur_pat, cur_pat-1); end
         end 
         prev_error = cur_pat;
       end
       $display(">>>  \tAt T=%0t, V=%0d, exp=%b, got=%b, pin %0s, scan cell %0d", $time, v_count, xsig[0], csig[0], SignalIDName[sid], fsci);
       if (diagf) begin 
         if (diagm==2) $fdisplay(diagf, "  C %0s %0d (exp=%b, got=%b)", SignalIDName[sid], v_count, xsig[0], csig[0]);
          else $fdisplay(diagf, "  %0d %0s %0d (exp=%b, got=%b)", cur_pat-patoff, SignalIDName[sid], fsci, xsig[0], csig[0]);
       end 
       nbfails = nbfails + 1;
     end
   end 
   endtask

   always begin: measure_sigs_p
    fork
     forever @(ALLOUTSIGS['d`\rdata[7] ]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`\rdata[7] ,ALLOUTSIGS[35], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`\rdata[6] ]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`\rdata[6] ,ALLOUTSIGS[36], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`\rdata[5] ]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`\rdata[5] ,ALLOUTSIGS[37], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`\rdata[4] ]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`\rdata[4] ,ALLOUTSIGS[38], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`\rdata[3] ]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`\rdata[3] ,ALLOUTSIGS[39], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`\rdata[2] ]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`\rdata[2] ,ALLOUTSIGS[40], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`\rdata[1] ]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`\rdata[1] ,ALLOUTSIGS[41], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`\rdata[0] ]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`\rdata[0] ,ALLOUTSIGS[42], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`full]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`full,ALLOUTSIGS[43], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`empty]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`empty,ALLOUTSIGS[44], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`near_full]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`near_full,ALLOUTSIGS[45], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`near_empty]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`near_empty,ALLOUTSIGS[46], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`over_flow]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`over_flow,ALLOUTSIGS[47], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`under_flow]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`under_flow,ALLOUTSIGS[48], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`test_so]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `load_unloadStmt || cur_stmt == `multiclock_captureStmt )
       if (cur_stmt ==`load_unloadStmt) measure_scan_out('d`test_so,ALLOUTSIGS[49], 24); 
       else measure_out_sig('d`test_so,ALLOUTSIGS[49], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`test_so_1]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `load_unloadStmt || cur_stmt == `multiclock_captureStmt )
       if (cur_stmt ==`load_unloadStmt) measure_scan_out('d`test_so_1,ALLOUTSIGS[50], 24); 
       else measure_out_sig('d`test_so_1,ALLOUTSIGS[50], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`test_so_2]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `load_unloadStmt || cur_stmt == `multiclock_captureStmt )
       if (cur_stmt ==`load_unloadStmt) measure_scan_out('d`test_so_2,ALLOUTSIGS[51], 24); 
       else measure_out_sig('d`test_so_2,ALLOUTSIGS[51], cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`test_so_3]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `load_unloadStmt || cur_stmt == `multiclock_captureStmt )
       if (cur_stmt ==`load_unloadStmt) measure_scan_out('d`test_so_3,ALLOUTSIGS[52], 24); 
       else measure_out_sig('d`test_so_3,ALLOUTSIGS[52], cur_stmt); 
     end
    join
   end 

   task undef_wfc;
     input reg [1:0] wfc;
     input reg [5:0] sid;
     input integer wftid;
   begin
     $display("XTB Error: unrecognized %s value (WFC):%0b, on signal %0s for WFT %0s. Exiting...", wfc[1]?"strobe":"force", wfc[0], SignalIDName[sid], WFTIDName[wftid]);
     $finish;
   end
   endtask

   task apply__multiclock_capture_WFT_WFT;
     reg [SIG_IDS_W-1:0] sid;
     reg [SIG_IDS_W-1:0] n;
     reg [SIG_IDS-1:0] s;
   begin
     for (sid=0; sid < SIG_IDS; sid=sid+1) begin
       n=0; 
       case(sid)
         'd28, 'd25, 'd24, 'd23, 'd22, 'd21, 'd20, 'd19, 'd18, 'd17, 'd16, 'd12, 'd14, 'd15, 'd29, 'd27, 'd26, 'd0, 'd11, 'd10, 'd9, 'd8, 'd7, 'd6, 'd5, 'd4, 'd2, 'd3, 'd31, 'd32, 'd33, 'd34: // atpg_mode, \near_empty_mrgn[0] , \near_empty_mrgn[1] , \near_empty_mrgn[2] , \near_empty_mrgn[3] , \near_empty_mrgn[4] , \near_full_mrgn[0] , \near_full_mrgn[1] , \near_full_mrgn[2] , \near_full_mrgn[3] , \near_full_mrgn[4] , rclk, ren, rptr_clr, test_mode, test_se, test_si, wclk, \wdata[0] , \wdata[1] , \wdata[2] , \wdata[3] , \wdata[4] , \wdata[5] , \wdata[6] , \wdata[7] , wen, wptr_clr, test_mode1, test_si_1, test_si_2, test_si_3_con
         begin
           if (ALLINSIGIDS[sid]==1'b1) begin
             for (n=0; n <SignalIDWidth[sid]; n=n+1) begin
               case ({TMPINSIGS_T[MAX_SIGW*sid+n],TMPINSIGS_V[MAX_SIGW*sid+n]})
                 2'b00: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'b0;   end
                 2'b01: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'b1;   end
                 2'b0Z: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'bZ;   end
                 2'b0X: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'bX;   end
                 default: undef_wfc({TMPINSIGS_T[MAX_SIGW*sid+n],TMPINSIGS_V[MAX_SIGW*sid+n]}, sid, 0);
               endcase
             end
           end
         end 
         'd44, 'd43, 'd46, 'd45, 'd47, 'd42, 'd41, 'd40, 'd39, 'd38, 'd37, 'd36, 'd35, 'd49, 'd48, 'd50, 'd51, 'd52: // empty, full, near_empty, near_full, over_flow, \rdata[0] , \rdata[1] , \rdata[2] , \rdata[3] , \rdata[4] , \rdata[5] , \rdata[6] , \rdata[7] , test_so, under_flow, test_so_1, test_so_2, test_so_3_con
         begin
           if (ALLOUTSIGIDS[sid]==1'b1) begin
             for (n=0; n <SignalIDWidth[sid]; n=n+1) begin
               case ({TMPOUTSIGS_T[MAX_SIGW*sid+n],TMPOUTSIGS_V[MAX_SIGW*sid+n]})
                 2'b1X: begin 
                         ALLOUTSIGS[MAX_SIGW*sid+n] <=    #(0) 1'bX;
                         ALLOUTSIGS[MAX_SIGW*sid+n] <=    #(40) 1'bX;   end
                 2'b11: begin 
                         ALLOUTSIGS[MAX_SIGW*sid+n] <=    #(0) 1'bX;
                         ALLOUTSIGS[MAX_SIGW*sid+n] <=    #(40) 1'b1;   end
                 2'b10: begin 
                         ALLOUTSIGS[MAX_SIGW*sid+n] <=    #(0) 1'bX;
                         ALLOUTSIGS[MAX_SIGW*sid+n] <=    #(40) 1'b0;   end
                 2'b1Z: begin 
                         ALLOUTSIGS[MAX_SIGW*sid+n] <=    #(0) 1'bX;
                         ALLOUTSIGS[MAX_SIGW*sid+n] <=    #(40) 1'bZ;   end
                 default: undef_wfc({TMPOUTSIGS_T[MAX_SIGW*sid+n],TMPOUTSIGS_V[MAX_SIGW*sid+n]}, sid, 0);
               endcase
             end
           end
         end 
         'd30: // test_clk
         begin
           if (ALLINSIGIDS[sid]==1'b1) begin
             for (n=0; n <SignalIDWidth[sid]; n=n+1) begin
               case ({TMPINSIGS_T[MAX_SIGW*sid+n],TMPINSIGS_V[MAX_SIGW*sid+n]})
                 2'b00: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'b0;   end
                 2'b01: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'b1;   end
                 2'b0Z: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'bZ;   end
                 2'b0X: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'bX;   end
                 2'bZ1: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'b0;   ALLINSIGS[MAX_SIGW*sid+n] <=    #(45) 1'b1;   ALLINSIGS[MAX_SIGW*sid+n] <=    #(55) 1'b0;   end
                 default: undef_wfc({TMPINSIGS_T[MAX_SIGW*sid+n],TMPINSIGS_V[MAX_SIGW*sid+n]}, sid, 0);
               endcase
             end
           end
         end 
         'd1: // wrst_n
         begin
           if (ALLINSIGIDS[sid]==1'b1) begin
             for (n=0; n <SignalIDWidth[sid]; n=n+1) begin
               case ({TMPINSIGS_T[MAX_SIGW*sid+n],TMPINSIGS_V[MAX_SIGW*sid+n]})
                 2'b00: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'b0;   end
                 2'b01: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'b1;   end
                 2'b0Z: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'bZ;   end
                 2'b0X: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'bX;   end
                 2'bZ1: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'b1;   ALLINSIGS[MAX_SIGW*sid+n] <=    #(45) 1'b0;   ALLINSIGS[MAX_SIGW*sid+n] <=    #(55) 1'b1;   end
                 default: undef_wfc({TMPINSIGS_T[MAX_SIGW*sid+n],TMPINSIGS_V[MAX_SIGW*sid+n]}, sid, 0);
               endcase
             end
           end
         end 
         'd13: // rrst_n
         begin
           if (ALLINSIGIDS[sid]==1'b1) begin
             for (n=0; n <SignalIDWidth[sid]; n=n+1) begin
               case ({TMPINSIGS_T[MAX_SIGW*sid+n],TMPINSIGS_V[MAX_SIGW*sid+n]})
                 2'b00: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'b0;   end
                 2'b01: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'b1;   end
                 2'b0Z: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'bZ;   end
                 2'b0X: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'bX;   end
                 2'bZ1: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'b1;   ALLINSIGS[MAX_SIGW*sid+n] <=    #(45) 1'b0;   ALLINSIGS[MAX_SIGW*sid+n] <=    #(55) 1'b1;   end
                 default: undef_wfc({TMPINSIGS_T[MAX_SIGW*sid+n],TMPINSIGS_V[MAX_SIGW*sid+n]}, sid, 0);
               endcase
             end
           end
         end 
       endcase 
     end 
   end 
   endtask

   task apply__default_WFT_WFT;
     reg [SIG_IDS_W-1:0] sid;
     reg [SIG_IDS_W-1:0] n;
     reg [SIG_IDS-1:0] s;
   begin
     for (sid=0; sid < SIG_IDS; sid=sid+1) begin
       n=0; 
       case(sid)
         'd28, 'd25, 'd24, 'd23, 'd22, 'd21, 'd20, 'd19, 'd18, 'd17, 'd16, 'd12, 'd14, 'd15, 'd29, 'd27, 'd26, 'd0, 'd11, 'd10, 'd9, 'd8, 'd7, 'd6, 'd5, 'd4, 'd2, 'd3, 'd31, 'd32, 'd33, 'd34: // atpg_mode, \near_empty_mrgn[0] , \near_empty_mrgn[1] , \near_empty_mrgn[2] , \near_empty_mrgn[3] , \near_empty_mrgn[4] , \near_full_mrgn[0] , \near_full_mrgn[1] , \near_full_mrgn[2] , \near_full_mrgn[3] , \near_full_mrgn[4] , rclk, ren, rptr_clr, test_mode, test_se, test_si, wclk, \wdata[0] , \wdata[1] , \wdata[2] , \wdata[3] , \wdata[4] , \wdata[5] , \wdata[6] , \wdata[7] , wen, wptr_clr, test_mode1, test_si_1, test_si_2, test_si_3_con
         begin
           if (ALLINSIGIDS[sid]==1'b1) begin
             for (n=0; n <SignalIDWidth[sid]; n=n+1) begin
               case ({TMPINSIGS_T[MAX_SIGW*sid+n],TMPINSIGS_V[MAX_SIGW*sid+n]})
                 2'b00: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'b0;   end
                 2'b01: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'b1;   end
                 2'b0Z: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'bZ;   end
                 2'b0X: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'bX;   end
                 default: undef_wfc({TMPINSIGS_T[MAX_SIGW*sid+n],TMPINSIGS_V[MAX_SIGW*sid+n]}, sid, 1);
               endcase
             end
           end
         end 
         'd30: // test_clk
         begin
           if (ALLINSIGIDS[sid]==1'b1) begin
             for (n=0; n <SignalIDWidth[sid]; n=n+1) begin
               case ({TMPINSIGS_T[MAX_SIGW*sid+n],TMPINSIGS_V[MAX_SIGW*sid+n]})
                 2'b00: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'b0;   end
                 2'b01: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'b1;   end
                 2'b0Z: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'bZ;   end
                 2'b0X: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'bX;   end
                 2'bZ1: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'b0;   ALLINSIGS[MAX_SIGW*sid+n] <=    #(45) 1'b1;   ALLINSIGS[MAX_SIGW*sid+n] <=    #(55) 1'b0;   end
                 default: undef_wfc({TMPINSIGS_T[MAX_SIGW*sid+n],TMPINSIGS_V[MAX_SIGW*sid+n]}, sid, 1);
               endcase
             end
           end
         end 
         'd1: // wrst_n
         begin
           if (ALLINSIGIDS[sid]==1'b1) begin
             for (n=0; n <SignalIDWidth[sid]; n=n+1) begin
               case ({TMPINSIGS_T[MAX_SIGW*sid+n],TMPINSIGS_V[MAX_SIGW*sid+n]})
                 2'b00: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'b0;   end
                 2'b01: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'b1;   end
                 2'b0Z: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'bZ;   end
                 2'b0X: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'bX;   end
                 2'bZ1: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'b1;   ALLINSIGS[MAX_SIGW*sid+n] <=    #(45) 1'b0;   ALLINSIGS[MAX_SIGW*sid+n] <=    #(55) 1'b1;   end
                 default: undef_wfc({TMPINSIGS_T[MAX_SIGW*sid+n],TMPINSIGS_V[MAX_SIGW*sid+n]}, sid, 1);
               endcase
             end
           end
         end 
         'd13: // rrst_n
         begin
           if (ALLINSIGIDS[sid]==1'b1) begin
             for (n=0; n <SignalIDWidth[sid]; n=n+1) begin
               case ({TMPINSIGS_T[MAX_SIGW*sid+n],TMPINSIGS_V[MAX_SIGW*sid+n]})
                 2'b00: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'b0;   end
                 2'b01: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'b1;   end
                 2'b0Z: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'bZ;   end
                 2'b0X: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'bX;   end
                 2'bZ1: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'b1;   ALLINSIGS[MAX_SIGW*sid+n] <=    #(45) 1'b0;   ALLINSIGS[MAX_SIGW*sid+n] <=    #(55) 1'b1;   end
                 default: undef_wfc({TMPINSIGS_T[MAX_SIGW*sid+n],TMPINSIGS_V[MAX_SIGW*sid+n]}, sid, 1);
               endcase
             end
           end
         end 
         'd44, 'd43, 'd46, 'd45, 'd47, 'd42, 'd41, 'd40, 'd39, 'd38, 'd37, 'd36, 'd35, 'd49, 'd48, 'd50, 'd51, 'd52: // empty, full, near_empty, near_full, over_flow, \rdata[0] , \rdata[1] , \rdata[2] , \rdata[3] , \rdata[4] , \rdata[5] , \rdata[6] , \rdata[7] , test_so, under_flow, test_so_1, test_so_2, test_so_3_con
         begin
           if (ALLOUTSIGIDS[sid]==1'b1) begin
             for (n=0; n <SignalIDWidth[sid]; n=n+1) begin
               case ({TMPOUTSIGS_T[MAX_SIGW*sid+n],TMPOUTSIGS_V[MAX_SIGW*sid+n]})
                 2'b1X: begin 
                         ALLOUTSIGS[MAX_SIGW*sid+n] <=    #(0) 1'bX;
                         ALLOUTSIGS[MAX_SIGW*sid+n] <=    #(40) 1'bX;   end
                 2'b11: begin 
                         ALLOUTSIGS[MAX_SIGW*sid+n] <=    #(0) 1'bX;
                         ALLOUTSIGS[MAX_SIGW*sid+n] <=    #(40) 1'b1;   end
                 2'b10: begin 
                         ALLOUTSIGS[MAX_SIGW*sid+n] <=    #(0) 1'bX;
                         ALLOUTSIGS[MAX_SIGW*sid+n] <=    #(40) 1'b0;   end
                 2'b1Z: begin 
                         ALLOUTSIGS[MAX_SIGW*sid+n] <=    #(0) 1'bX;
                         ALLOUTSIGS[MAX_SIGW*sid+n] <=    #(40) 1'bZ;   end
                 default: undef_wfc({TMPOUTSIGS_T[MAX_SIGW*sid+n],TMPOUTSIGS_V[MAX_SIGW*sid+n]}, sid, 1);
               endcase
             end
           end
         end 
       endcase 
     end 
   end 
   endtask

   task resolve_wft;
     input integer wftid ;
   begin
     if (wftid > WFT_IDS || wftid <0) begin 
       $display("\nXTB Error: undefined WFT id %0d (valid range is 0..%0d). Exiting...",wftid, WFT_IDS);
       $finish;
     end
     the_wft_id = wftid;
   end
   endtask

   task apply_wft; 
     input integer wftid ;
   begin
     case (wftid) 
       'd0: apply__multiclock_capture_WFT_WFT;
       'd1: apply__default_WFT_WFT;
       default:begin $display("\nXTB Error: undefined WFT id %d. Exiting...",wftid); $finish; end
     endcase
   end
   endtask 

   task  complete_cycle;
     input integer wft_id ;
   begin
     case(wft_id)
       'd0: #(100); // _multiclock_capture_WFT_
       'd1: #(100); // _default_WFT_
     endcase
   end
   endtask

   task set_args;
     input reg [5:0] nargs;
     integer i, na;
     reg [2*CUM_WIDTH-1:0] sidx;
     reg [SIG_IDS_W-1:0] sid; 
   begin
     na = 0; sid_args = 'b0; sval_args = 'b0;
     while (na < nargs) begin
       data_i = data_i + 1;
       memel = memall[data_i];
       sid = memel[SIG_IDS_W-1:0];
       if (sid > SIG_IDS-1) begin
         $display($time, "\nXTB Error: Passing wrong signal ID (%0b), valid range is 1..%0d. Exiting...", sid, SIG_IDS-1);
         $finish; 
       end
       sid_args[sid] = 1'b1;
       sidx = sig_idx(sid);
       for (i = 0; i < 2*SignalIDWidth[sid]; i = i + 1)
         sval_args[sidx+i] = memel[i+SIG_IDS_W];
       na=na+1; 
    end  
  end 
  endtask

   function [2*CUM_WIDTH-1:0] sig_idx;
     input reg [SIG_IDS_W-1:0] sid;
     integer i; 
   begin
     sig_idx = 0;
     for (i = 0; i < sid; i = i + 1) sig_idx = sig_idx+2*SignalIDWidth[i];
   end 
   endfunction

   task  assign_ival;
     input reg [SIG_IDS_W-1:0] sid;
     reg [2*CUM_WIDTH-1:0] sidx;
     reg [2*MAX_WIDTH-1:0] sval;
     integer i;
   begin 
     sidx = sig_idx(sid);
     for (i = 0; i<2*SignalIDWidth[sid]; i = i + 1) sval[i] = sval_args[sidx+i];
     assign_val(sid , sval);
   end 
   endtask

   task  assign_val;
     input reg [SIG_IDS_W-1:0] sid;
     input reg [2*MAX_WIDTH-1:0] sval;
     reg [MAX_WIDTH-1:0] nb; 
     reg [7:0] idx;
     reg [5:0] n, ns;
   begin
     if (sid > SIG_IDS-1 || sid < 0) begin
       $display("\nXTB Error: Passing wrong signal ID (%d), valid range is 1..%0d. Exiting...", sid, SIG_IDS-1);
       $finish;
     end
     resolve_signal(sid);
     idx = 0; 
     ns = (SignalIDType[sid]==3) ? SignalIDWidth[sid] : 1;
     for (n = 0; n < ns; n = n + 1)
     begin
       if (sval[idx+SignalIDWidth[sid]] === 1'b1) begin
         for (nb = 0; nb < SignalIDWidth[the_sids[n]]; nb = nb + 1) begin
           TMPOUTSIGS_V[MAX_SIGW*the_sids[n]+nb]  = sval[idx+nb];
           TMPOUTSIGS_T[MAX_SIGW*the_sids[n]+nb]  = sval[idx+nb+SignalIDWidth[sid]];
           ALLOUTSIGIDS[the_sids[n]] = 1'b1; 
           if (sval[idx+nb] !== 1'bx)
             ALLINSIGIDS[the_sids[n]] = 1'b0;
         end
       end
       else begin
         for (nb = 0; nb < SignalIDWidth[the_sids[n]]; nb = nb + 1) begin
           TMPINSIGS_V[MAX_SIGW*the_sids[n]+nb]  = sval[idx+nb];
           TMPINSIGS_T[MAX_SIGW*the_sids[n]+nb]  = sval[idx+nb+SignalIDWidth[sid]];
           ALLINSIGIDS[the_sids[n]] = 1'b1;
           ALLOUTSIGIDS[the_sids[n]] = 1'b0;
       end 
     end
     idx = idx+SignalIDWidth[the_sids[n]];
     end 
   end 
   endtask

   task  check_sid_args;
     input reg [(NAMELENGTH-1):0] tname;
     input reg [SIG_IDS-1:0] vargs ;
     input reg [SIG_IDS-1:0] cargs ;
     integer i;
   begin
     for (i = 0; i < SIG_IDS-1; i = i + 1)
       if (cargs[i] === 1'b1 && vargs[i] !== 1'b1) begin
         $display("\nXTB Error: Passing wrong signal argument (%s), to Macro/Procedure %s. Exiting...", SignalIDName[i], tname); 
         $finish;
       end 
   end 
   endtask

   task  assign_stmt;
     input integer wftid ;
   begin
     v_count = v_count+1;
     v_count_per_pat = v_count_per_pat+1;
     if (verbose >= 4) $display("XTB: Starting V# %0d at time %0t", v_count, $time);
     apply_wft(wftid);
     complete_cycle(wftid);
   end
   endtask

   task display_stmt;
     input integer stmtid;
   begin
     $display("XTB: Processed statement: %0s", StmtNames[stmtid]);
   end
   endtask

   task read_data;
     integer tdf;
   begin
     tdf = $fopen(TDATA_FILE, "r");
     if (!tdf) begin 
       $display("XTB Error: cannot open %0s file. Exiting...\n", TDATA_FILE);
       $finish; 
      end 
      $fclose(tdf); 
     if (tdfm > 0) $display("XTB: Setting test data file to \"%0s\" (at %0s). Running simulation with new database...", TDATA_FILE, tdfm==1?"compile-time":"runtime");
     else if (verbose >= 1) $display("XTB: Reading test data file \"%0s\" ", TDATA_FILE);
     $readmemb(TDATA_FILE, memall);
   end
    endtask

   task measure_chain_out;
     input integer sid;
     integer bi, patoff, prefo;
     reg [0:MAXCHLEN-1]  UNLM;
   begin
     prefo = 0;
     UNLM = ~('b0);
     case (sid)
      `test_so: begin 
           UNL = UNLOAD[0] << prefo ; 
           CHOUT = \chout_test_so  ; 
       end 
      `test_so_1: begin 
           UNL = UNLOAD[1] << prefo ; 
           CHOUT = \chout_test_so_1  ; 
       end 
      `test_so_2: begin 
           UNL = UNLOAD[2] << prefo ; 
           CHOUT = \chout_test_so_2  ; 
       end 
      `test_so_3: begin 
           UNL = UNLOAD[3] << prefo ; 
           CHOUT = \chout_test_so_3  ; 
       end 
       default: begin $display("\nXTB Error: Unrecognized scanout signal %0s to strobe", SignalIDName[sid]); $finish; end
     endcase

     for (bi = 0; bi < MAXCHLEN; bi = bi + 1) begin
       if (UNL[bi] === 1'bx)  UNLM[bi] = 1'b0;
     end

     for(bi = 0; bi < prefo  ; bi = bi + 1) UNLM[MAXCHLEN-1-bi] = 1'b0;

     if ((UNL&UNLM) !== (CHOUT&UNLM)) begin
       patoff = (loads > 1 || cur_pat <= 0) ? 0 : 1;
     if (cur_pat <= 0 || cur_pat == last_pat && loads > 1) begin
       $display(">>>  Error during scan pattern %0d %s", (cur_pat<0)?0:cur_pat, (cur_pat==last_pat)?"(detected from final parallel pattern unload)":"");
     end
     else begin
       if (loads > 1) $display(">>>  Error during scan pattern %0d (detected from %0d parallel load/unload)", cur_pat, loads);
       else begin $display(">>>  Error during scan pattern %0d (detected from parallel unload of pattern %0d)", cur_pat, cur_pat-1); end
     end
       for (bi = 0; bi < MAXCHLEN-prefo; bi=bi + 1) begin
         if ((UNLM[bi] !== 1'b0) && (UNL[bi] !== CHOUT[bi])) begin
           $display(">>>  \tAt T=%0t, V=%0d, exp=%b, got=%b, pin %0s, scan cell %0d", $time, sertmg?v_count+1+bi+prefo:v_count, UNL[bi], CHOUT[bi], SignalIDName[sid], bi+prefo);
           if (diagf) begin 
             if (diagm==2) $fdisplay(diagf, "  C %0s %0d (exp=%b, got=%b) ", SignalIDName[sid], v_count, UNL[bi], CHOUT[bi]);
             else $fdisplay(diagf, "  %0d %0s %0d (exp=%b, got=%b) ",
               cur_pat-patoff, SignalIDName[sid], bi+prefo, UNL[bi], CHOUT[bi]);
           end 
           nbfails = nbfails + 1;
          end 
       end  
     end  
   end
   endtask

   task test_setup ;
     input reg [SIG_IDS-1:0] idargs;
     input reg [2*CUM_WIDTH-1:0] valargs;
   begin
     if (test_setup_only_once > 0 && test_setup_runs > 0) begin
       if (verbose >= 2) $display("XTB: Skipping macro test_setup...");
       disable test_setup;
     end
     test_setup_runs = test_setup_runs + 1;
     if (verbose >= 2) $display("XTB: Starting macro test_setup..., T=%0t, V=%0d", $time, v_count+1);
     //check_sid_args("test_setup",60'b1, idargs);
     resolve_wft(1);

     assign_val('d`all_inputs , 70'b00000000000000000000000000000000000XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX);
     assign_val('d`all_outputs , 36'b111111111111111111XXXXXXXXXXXXXXXXXX);

     assign_val('d`atpg_mode , 2'b01);
     assign_val('d`rrst_n , 2'b01);
     assign_val('d`test_clk , 2'b00);
     assign_val('d`test_mode , 2'b01);
     assign_val('d`wrst_n , 2'b01);
     assign_val('d`test_mode1 , 2'b01);
     assign_stmt(the_wft_id);

     assign_stmt(the_wft_id);

   end 
   endtask

   task shift_0 ;
     input reg [SIG_IDS-1:0] idargs;
     input reg [2*CUM_WIDTH-1:0] valargs;
     input integer stsci;
     input reg stroben;
   begin
    csci = stsci+0; prev_error = -2;
    while (csci < 9) begin
     fsci = csci;
     if (verbose >= 2) $display("XTB: shift %0d, at %0t ", csci, $time);
     resolve_wft(1);
     assign_val('d`_clk , 6'b0Z0111);
         if (idargs[26] === 1'b1) begin 
           LOD=LOAD[0]; assign_val('d`test_si , {1'b0, LOD[csci+0]});
         end
         if (idargs[32] === 1'b1) begin 
           LOD=LOAD[1]; assign_val('d`test_si_1 , {1'b0, LOD[csci+0]});
         end
         if (idargs[33] === 1'b1) begin 
           LOD=LOAD[2]; assign_val('d`test_si_2 , {1'b0, LOD[csci+0]});
         end
         if (idargs[34] === 1'b1) begin 
           LOD=LOAD[3]; assign_val('d`test_si_3 , {1'b0, LOD[csci+0]});
         end
         if(stroben && idargs[49] === 1'b1) begin 
           UNL = UNLOAD[0]; assign_val('d`test_so , {1'b1,  UNL[csci+0]});
         end
         if(stroben && idargs[50] === 1'b1) begin 
           UNL = UNLOAD[1]; assign_val('d`test_so_1 , {1'b1,  UNL[csci+0]});
         end
         if(stroben && idargs[51] === 1'b1) begin 
           UNL = UNLOAD[2]; assign_val('d`test_so_2 , {1'b1,  UNL[csci+0]});
         end
         if(stroben && idargs[52] === 1'b1) begin 
           UNL = UNLOAD[3]; assign_val('d`test_so_3 , {1'b1,  UNL[csci+0]});
         end
     assign_stmt(the_wft_id);
     csci = csci+1;
    end
   end
   endtask


   always /* ParallelShiftMode */ @(strobe_scells) begin
     CHAINOUT0[0:8] = {`XTB_DUT_HIER.sync_w2r.sync_out_reg_0_.Q , `XTB_DUT_HIER.sync_w2r.sync_out_reg_0_.D , `XTB_DUT_HIER.sync_w2r.temp_reg_0_.SD , `XTB_DUT_HIER.sync_r2w.sync_out_reg_2_.D , `XTB_DUT_HIER.sync_r2w.temp_reg_2_.SD , `XTB_DUT_HIER.sync_r2w.sync_out_reg_1_.D , `XTB_DUT_HIER.sync_r2w.temp_reg_1_.SD , `XTB_DUT_HIER.sync_r2w.sync_out_reg_0_.D ,  LODCHP0[0] };
   end

   always /* ParallelShiftMode */ @(strobe_scells) begin
     CHAINOUT1[0:8] = {`XTB_DUT_HIER.sync_w2r.sync_out_reg_4_.Q , `XTB_DUT_HIER.sync_w2r.sync_out_reg_4_.D , `XTB_DUT_HIER.sync_w2r.temp_reg_4_.SD , `XTB_DUT_HIER.sync_w2r.sync_out_reg_3_.D , `XTB_DUT_HIER.sync_w2r.temp_reg_3_.SD , `XTB_DUT_HIER.sync_w2r.sync_out_reg_2_.D , `XTB_DUT_HIER.sync_w2r.temp_reg_2_.SD , `XTB_DUT_HIER.sync_w2r.sync_out_reg_1_.D ,  LODCHP1[0] };
   end

   always /* ParallelShiftMode */ @(strobe_scells) begin
     CHAINOUT2[0:8] = {`XTB_DUT_HIER.fifo_mem.mem_reg_0__4_.Q , `XTB_DUT_HIER.fifo_mem.mem_reg_0__4_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_0__3_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_0__2_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_0__1_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_0__0_.SD , `XTB_DUT_HIER.R_2.SD , `XTB_DUT_HIER.R_1.SD ,  LODCHP2[0] };
   end

   always /* ParallelShiftMode */ @(strobe_scells) begin
     CHAINOUT3[0:8] = {`XTB_DUT_HIER.fifo_mem.mem_reg_1__4_.Q , `XTB_DUT_HIER.fifo_mem.mem_reg_1__4_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_1__3_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_1__2_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_1__1_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_1__0_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_0__7_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_0__6_.SD ,  LODCHP3[0] };
   end

   always /* ParallelShiftMode */ @(strobe_scells) begin
     CHAINOUT4[0:8] = {`XTB_DUT_HIER.fifo_mem.mem_reg_2__4_.Q , `XTB_DUT_HIER.fifo_mem.mem_reg_2__4_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_2__3_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_2__2_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_2__1_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_2__0_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_1__7_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_1__6_.SD ,  LODCHP4[0] };
   end

   always /* ParallelShiftMode */ @(strobe_scells) begin
     CHAINOUT5[0:8] = {`XTB_DUT_HIER.fifo_mem.mem_reg_3__4_.Q , `XTB_DUT_HIER.fifo_mem.mem_reg_3__4_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_3__3_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_3__2_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_3__1_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_3__0_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_2__7_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_2__6_.SD ,  LODCHP5[0] };
   end

   always /* ParallelShiftMode */ @(strobe_scells) begin
     CHAINOUT6[0:8] = {`XTB_DUT_HIER.fifo_mem.mem_reg_4__4_.Q , `XTB_DUT_HIER.fifo_mem.mem_reg_4__4_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_4__3_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_4__2_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_4__1_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_4__0_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_3__7_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_3__6_.SD ,  LODCHP6[0] };
   end

   always /* ParallelShiftMode */ @(strobe_scells) begin
     CHAINOUT7[0:8] = {`XTB_DUT_HIER.fifo_mem.mem_reg_5__4_.Q , `XTB_DUT_HIER.fifo_mem.mem_reg_5__4_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_5__3_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_5__2_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_5__1_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_5__0_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_4__7_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_4__6_.SD ,  LODCHP7[0] };
   end

   always /* ParallelShiftMode */ @(strobe_scells) begin
     CHAINOUT8[0:8] = {`XTB_DUT_HIER.fifo_mem.mem_reg_6__4_.Q , `XTB_DUT_HIER.fifo_mem.mem_reg_6__4_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_6__3_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_6__2_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_6__1_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_6__0_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_5__7_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_5__6_.SD ,  LODCHP8[0] };
   end

   always /* ParallelShiftMode */ @(strobe_scells) begin
     CHAINOUT9[0:8] = {`XTB_DUT_HIER.fifo_mem.mem_reg_7__3_.Q , `XTB_DUT_HIER.fifo_mem.mem_reg_7__3_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_7__2_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_7__1_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_7__0_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_6__7_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_6__6_.SD ,  LODCHP9[0] ,  LODCHP9[1] };
   end

   always /* ParallelShiftMode */ @(strobe_scells) begin
     CHAINOUT10[0:8] = {`XTB_DUT_HIER.fifo_mem.mem_reg_8__2_.Q , `XTB_DUT_HIER.fifo_mem.mem_reg_8__2_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_8__1_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_8__0_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_7__7_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_7__6_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_7__5_.SD ,  LODCHP10[0] ,  LODCHP10[1] };
   end

   always /* ParallelShiftMode */ @(strobe_scells) begin
     CHAINOUT11[0:8] = {`XTB_DUT_HIER.fifo_mem.mem_reg_9__1_.Q , `XTB_DUT_HIER.fifo_mem.mem_reg_9__1_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_9__0_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_8__7_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_8__6_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_8__5_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_8__4_.SD ,  LODCHP11[0] ,  LODCHP11[1] };
   end

   always /* ParallelShiftMode */ @(strobe_scells) begin
     CHAINOUT12[0:8] = {`XTB_DUT_HIER.fifo_mem.mem_reg_10__0_.Q , `XTB_DUT_HIER.fifo_mem.mem_reg_10__0_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_9__7_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_9__6_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_9__5_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_9__4_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_9__3_.SD ,  LODCHP12[0] ,  LODCHP12[1] };
   end

   always /* ParallelShiftMode */ @(strobe_scells) begin
     CHAINOUT13[0:8] = {`XTB_DUT_HIER.fifo_mem.mem_reg_10__7_.Q , `XTB_DUT_HIER.fifo_mem.mem_reg_10__7_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_10__6_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_10__5_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_10__4_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_10__3_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_10__2_.SD ,  LODCHP13[0] ,  LODCHP13[1] };
   end

   always /* ParallelShiftMode */ @(strobe_scells) begin
     CHAINOUT14[0:8] = {`XTB_DUT_HIER.fifo_mem.mem_reg_11__6_.Q , `XTB_DUT_HIER.fifo_mem.mem_reg_11__6_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_11__5_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_11__4_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_11__3_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_11__2_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_11__1_.SD ,  LODCHP14[0] ,  LODCHP14[1] };
   end

   always /* ParallelShiftMode */ @(strobe_scells) begin
     CHAINOUT15[0:8] = {`XTB_DUT_HIER.fifo_mem.mem_reg_12__5_.Q , `XTB_DUT_HIER.fifo_mem.mem_reg_12__5_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_12__4_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_12__3_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_12__2_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_12__1_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_12__0_.SD ,  LODCHP15[0] ,  LODCHP15[1] };
   end

   always /* ParallelShiftMode */ @(strobe_scells) begin
     CHAINOUT16[0:8] = {`XTB_DUT_HIER.fifo_mem.mem_reg_13__4_.Q , `XTB_DUT_HIER.fifo_mem.mem_reg_13__4_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_13__3_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_13__2_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_13__1_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_13__0_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_12__7_.SD ,  LODCHP16[0] ,  LODCHP16[1] };
   end

   always /* ParallelShiftMode */ @(strobe_scells) begin
     CHAINOUT17[0:8] = {`XTB_DUT_HIER.fifo_mem.mem_reg_14__3_.Q , `XTB_DUT_HIER.fifo_mem.mem_reg_14__3_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_14__2_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_14__1_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_14__0_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_13__7_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_13__6_.SD ,  LODCHP17[0] ,  LODCHP17[1] };
   end

   always /* ParallelShiftMode */ @(strobe_scells) begin
     CHAINOUT18[0:8] = {`XTB_DUT_HIER.fifo_mem.mem_reg_15__2_.Q , `XTB_DUT_HIER.fifo_mem.mem_reg_15__2_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_15__1_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_15__0_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_14__7_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_14__6_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_14__5_.SD ,  LODCHP18[0] ,  LODCHP18[1] };
   end

   always /* ParallelShiftMode */ @(strobe_scells) begin
     CHAINOUT19[0:8] = {`XTB_DUT_HIER.rptr_empty_near_empty_reg.Q , `XTB_DUT_HIER.rptr_empty_near_empty_reg.SD , `XTB_DUT_HIER.rptr_empty_empty_reg.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_15__7_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_15__6_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_15__5_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_15__4_.SD ,  LODCHP19[0] ,  LODCHP19[1] };
   end

   always /* ParallelShiftMode */ @(strobe_scells) begin
     CHAINOUT20[0:8] = {`XTB_DUT_HIER.rptr_empty_rptr_reg_1_.Q , `XTB_DUT_HIER.rptr_empty_rptr_reg_1_.SD , `XTB_DUT_HIER.rptr_empty_rptr_reg_0_.SD , `XTB_DUT_HIER.rptr_empty_rbin_reg_4_.SD , `XTB_DUT_HIER.rptr_empty_rbin_reg_3_.SD , `XTB_DUT_HIER.rptr_empty_rbin_reg_2_.SD , `XTB_DUT_HIER.rptr_empty_rbin_reg_1_.SD ,  LODCHP20[0] ,  LODCHP20[1] };
   end

   always /* ParallelShiftMode */ @(strobe_scells) begin
     CHAINOUT21[0:8] = {`XTB_DUT_HIER.sync_rst_r.dff2_reg.Q , `XTB_DUT_HIER.sync_rst_r.dff2_reg.SD , `XTB_DUT_HIER.sync_rst_r.dff1_reg.SD , `XTB_DUT_HIER.sync_r2w.temp_reg_4_.SD , `XTB_DUT_HIER.sync_r2w.temp_reg_3_.SD , `XTB_DUT_HIER.rptr_empty_under_flow_reg.SD , `XTB_DUT_HIER.rptr_empty_rptr_reg_3_.SD ,  LODCHP21[0] ,  LODCHP21[1] };
   end

   always /* ParallelShiftMode */ @(strobe_scells) begin
     CHAINOUT22[0:8] = {`XTB_DUT_HIER.wptr_full_wbin_reg_1_.Q , `XTB_DUT_HIER.wptr_full_wbin_reg_1_.SD , `XTB_DUT_HIER.wptr_full_wbin_reg_0_.SD , `XTB_DUT_HIER.wptr_full_over_flow_reg.SD , `XTB_DUT_HIER.wptr_full_near_full_reg.SD , `XTB_DUT_HIER.wptr_full_full_reg.SD , `XTB_DUT_HIER.sync_rst_w.dff2_reg.SD ,  LODCHP22[0] ,  LODCHP22[1] };
   end

   always /* ParallelShiftMode */ @(strobe_scells) begin
     CHAINOUT23[0:8] = {`XTB_DUT_HIER.wptr_full_wptr_reg_3_.Q , `XTB_DUT_HIER.wptr_full_wptr_reg_3_.SD , `XTB_DUT_HIER.wptr_full_wptr_reg_2_.SD , `XTB_DUT_HIER.wptr_full_wptr_reg_1_.SD , `XTB_DUT_HIER.wptr_full_wptr_reg_0_.SD , `XTB_DUT_HIER.wptr_full_wbin_reg_4_.SD , `XTB_DUT_HIER.wptr_full_wbin_reg_3_.SD ,  LODCHP23[0] ,  LODCHP23[1] };
   end

   MaxTB_DECOMPRESSOR decomp1 (net_si[0], net_si[1], net_si[2], net_si[3], dec_dout);

   task ser2par_force_data;
     integer i, c; 
   begin
     for(c = 0; c < MAXCHLEN; c = c + 1) begin
       for(i = 0; i < NSIS; i = i + 1) begin
         LOD = LOAD[i]; 
         net_si[i] = LOD[c];
       end 

       repeat (SYNC_LATENCY) 	 
         #0;
       {{ LODCHP0[c], LODCHP1[c], LODCHP2[c], LODCHP3[c], LODCHP4[c], LODCHP5[c], LODCHP6[c], LODCHP7[c], LODCHP8[c], LODCHP9[c], LODCHP10[c], LODCHP11[c], LODCHP12[c], LODCHP13[c], LODCHP14[c], LODCHP15[c], LODCHP16[c], LODCHP17[c], LODCHP18[c], LODCHP19[c], LODCHP20[c], LODCHP21[c], LODCHP22[c], LODCHP23 [c] }} = dec_dout;
       #0;
     end
   end 
   endtask

   MaxTB_COMPRESSOR comp1 (com_din, net_so[0], net_so[1], net_so[2], net_so[3]);

   task par2ser_strobe_data;
    integer i, c;
   begin 
     UNLODCHP0 = CHAINOUT0 ^ CH_OUTINV[0];
     UNLODCHP1 = CHAINOUT1 ^ CH_OUTINV[1];
     UNLODCHP2 = CHAINOUT2 ^ CH_OUTINV[2];
     UNLODCHP3 = CHAINOUT3 ^ CH_OUTINV[3];
     UNLODCHP4 = CHAINOUT4 ^ CH_OUTINV[4];
     UNLODCHP5 = CHAINOUT5 ^ CH_OUTINV[5];
     UNLODCHP6 = CHAINOUT6 ^ CH_OUTINV[6];
     UNLODCHP7 = CHAINOUT7 ^ CH_OUTINV[7];
     UNLODCHP8 = CHAINOUT8 ^ CH_OUTINV[8];
     UNLODCHP9 = CHAINOUT9 ^ CH_OUTINV[9];
     UNLODCHP10 = CHAINOUT10 ^ CH_OUTINV[10];
     UNLODCHP11 = CHAINOUT11 ^ CH_OUTINV[11];
     UNLODCHP12 = CHAINOUT12 ^ CH_OUTINV[12];
     UNLODCHP13 = CHAINOUT13 ^ CH_OUTINV[13];
     UNLODCHP14 = CHAINOUT14 ^ CH_OUTINV[14];
     UNLODCHP15 = CHAINOUT15 ^ CH_OUTINV[15];
     UNLODCHP16 = CHAINOUT16 ^ CH_OUTINV[16];
     UNLODCHP17 = CHAINOUT17 ^ CH_OUTINV[17];
     UNLODCHP18 = CHAINOUT18 ^ CH_OUTINV[18];
     UNLODCHP19 = CHAINOUT19 ^ CH_OUTINV[19];
     UNLODCHP20 = CHAINOUT20 ^ CH_OUTINV[20];
     UNLODCHP21 = CHAINOUT21 ^ CH_OUTINV[21];
     UNLODCHP22 = CHAINOUT22 ^ CH_OUTINV[22];
     UNLODCHP23 = CHAINOUT23 ^ CH_OUTINV[23];

     for(c = 0; c < MAXCHLEN; c = c + 1) begin
       com_din = {{UNLODCHP0[c], UNLODCHP1[c], UNLODCHP2[c], UNLODCHP3[c], UNLODCHP4[c], UNLODCHP5[c], UNLODCHP6[c], UNLODCHP7[c], UNLODCHP8[c], UNLODCHP9[c], UNLODCHP10[c], UNLODCHP11[c], UNLODCHP12[c], UNLODCHP13[c], UNLODCHP14[c], UNLODCHP15[c], UNLODCHP16[c], UNLODCHP17[c], UNLODCHP18[c], UNLODCHP19[c], UNLODCHP20[c], UNLODCHP21[c], UNLODCHP22[c], UNLODCHP23[c]}};
       repeat (SYNC_LATENCY) 	 
         #0;
       { \chout_test_so [c] , \chout_test_so_1 [c] , \chout_test_so_2 [c] , \chout_test_so_3 [c] } = net_so; 
       #0; 
     end
   end 
   endtask
   `define CELL0IN0 `XTB_DUT_HIER.sync_r2w.temp_reg_0_.SD
   `define CELL0IN1 `XTB_DUT_HIER.sync_w2r.temp_reg_1_.SD
   `define CELL0IN2 `XTB_DUT_HIER.R_0.SD
   `define CELL0IN3 `XTB_DUT_HIER.fifo_mem.mem_reg_0__5_.SD
   `define CELL0IN4 `XTB_DUT_HIER.fifo_mem.mem_reg_1__5_.SD
   `define CELL0IN5 `XTB_DUT_HIER.fifo_mem.mem_reg_2__5_.SD
   `define CELL0IN6 `XTB_DUT_HIER.fifo_mem.mem_reg_3__5_.SD
   `define CELL0IN7 `XTB_DUT_HIER.fifo_mem.mem_reg_4__5_.SD
   `define CELL0IN8 `XTB_DUT_HIER.fifo_mem.mem_reg_5__5_.SD
   `define CELL0IN9 `XTB_DUT_HIER.fifo_mem.mem_reg_6__5_.SD
   `define CELL0IN10 `XTB_DUT_HIER.fifo_mem.mem_reg_7__4_.SD
   `define CELL0IN11 `XTB_DUT_HIER.fifo_mem.mem_reg_8__3_.SD
   `define CELL0IN12 `XTB_DUT_HIER.fifo_mem.mem_reg_9__2_.SD
   `define CELL0IN13 `XTB_DUT_HIER.fifo_mem.mem_reg_10__1_.SD
   `define CELL0IN14 `XTB_DUT_HIER.fifo_mem.mem_reg_11__0_.SD
   `define CELL0IN15 `XTB_DUT_HIER.fifo_mem.mem_reg_11__7_.SD
   `define CELL0IN16 `XTB_DUT_HIER.fifo_mem.mem_reg_12__6_.SD
   `define CELL0IN17 `XTB_DUT_HIER.fifo_mem.mem_reg_13__5_.SD
   `define CELL0IN18 `XTB_DUT_HIER.fifo_mem.mem_reg_14__4_.SD
   `define CELL0IN19 `XTB_DUT_HIER.fifo_mem.mem_reg_15__3_.SD
   `define CELL0IN20 `XTB_DUT_HIER.rptr_empty_rbin_reg_0_.SD
   `define CELL0IN21 `XTB_DUT_HIER.rptr_empty_rptr_reg_2_.SD
   `define CELL0IN22 `XTB_DUT_HIER.sync_rst_w.dff1_reg.SD
   `define CELL0IN23 `XTB_DUT_HIER.wptr_full_wbin_reg_2_.SD
   `define CHAININ0 {`XTB_DUT_HIER.sync_w2r.sync_out_reg_0_.D , `XTB_DUT_HIER.sync_w2r.temp_reg_0_.SD , `XTB_DUT_HIER.sync_r2w.sync_out_reg_2_.D , `XTB_DUT_HIER.sync_r2w.temp_reg_2_.SD , `XTB_DUT_HIER.sync_r2w.sync_out_reg_1_.D , `XTB_DUT_HIER.sync_r2w.temp_reg_1_.SD , `XTB_DUT_HIER.sync_r2w.sync_out_reg_0_.D ,  `CELL0IN0 }

   `define CHAININ1 {`XTB_DUT_HIER.sync_w2r.sync_out_reg_4_.D , `XTB_DUT_HIER.sync_w2r.temp_reg_4_.SD , `XTB_DUT_HIER.sync_w2r.sync_out_reg_3_.D , `XTB_DUT_HIER.sync_w2r.temp_reg_3_.SD , `XTB_DUT_HIER.sync_w2r.sync_out_reg_2_.D , `XTB_DUT_HIER.sync_w2r.temp_reg_2_.SD , `XTB_DUT_HIER.sync_w2r.sync_out_reg_1_.D ,  `CELL0IN1 }

   `define CHAININ2 {`XTB_DUT_HIER.fifo_mem.mem_reg_0__4_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_0__3_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_0__2_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_0__1_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_0__0_.SD , `XTB_DUT_HIER.R_2.SD , `XTB_DUT_HIER.R_1.SD ,  `CELL0IN2 }

   `define CHAININ3 {`XTB_DUT_HIER.fifo_mem.mem_reg_1__4_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_1__3_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_1__2_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_1__1_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_1__0_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_0__7_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_0__6_.SD ,  `CELL0IN3 }

   `define CHAININ4 {`XTB_DUT_HIER.fifo_mem.mem_reg_2__4_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_2__3_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_2__2_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_2__1_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_2__0_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_1__7_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_1__6_.SD ,  `CELL0IN4 }

   `define CHAININ5 {`XTB_DUT_HIER.fifo_mem.mem_reg_3__4_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_3__3_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_3__2_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_3__1_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_3__0_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_2__7_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_2__6_.SD ,  `CELL0IN5 }

   `define CHAININ6 {`XTB_DUT_HIER.fifo_mem.mem_reg_4__4_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_4__3_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_4__2_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_4__1_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_4__0_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_3__7_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_3__6_.SD ,  `CELL0IN6 }

   `define CHAININ7 {`XTB_DUT_HIER.fifo_mem.mem_reg_5__4_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_5__3_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_5__2_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_5__1_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_5__0_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_4__7_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_4__6_.SD ,  `CELL0IN7 }

   `define CHAININ8 {`XTB_DUT_HIER.fifo_mem.mem_reg_6__4_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_6__3_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_6__2_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_6__1_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_6__0_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_5__7_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_5__6_.SD ,  `CELL0IN8 }

   `define CHAININ9 {`XTB_DUT_HIER.fifo_mem.mem_reg_7__3_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_7__2_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_7__1_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_7__0_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_6__7_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_6__6_.SD ,  `CELL0IN9 }

   `define CHAININ10 {`XTB_DUT_HIER.fifo_mem.mem_reg_8__2_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_8__1_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_8__0_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_7__7_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_7__6_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_7__5_.SD ,  `CELL0IN10 }

   `define CHAININ11 {`XTB_DUT_HIER.fifo_mem.mem_reg_9__1_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_9__0_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_8__7_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_8__6_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_8__5_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_8__4_.SD ,  `CELL0IN11 }

   `define CHAININ12 {`XTB_DUT_HIER.fifo_mem.mem_reg_10__0_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_9__7_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_9__6_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_9__5_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_9__4_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_9__3_.SD ,  `CELL0IN12 }

   `define CHAININ13 {`XTB_DUT_HIER.fifo_mem.mem_reg_10__7_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_10__6_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_10__5_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_10__4_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_10__3_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_10__2_.SD ,  `CELL0IN13 }

   `define CHAININ14 {`XTB_DUT_HIER.fifo_mem.mem_reg_11__6_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_11__5_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_11__4_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_11__3_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_11__2_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_11__1_.SD ,  `CELL0IN14 }

   `define CHAININ15 {`XTB_DUT_HIER.fifo_mem.mem_reg_12__5_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_12__4_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_12__3_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_12__2_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_12__1_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_12__0_.SD ,  `CELL0IN15 }

   `define CHAININ16 {`XTB_DUT_HIER.fifo_mem.mem_reg_13__4_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_13__3_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_13__2_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_13__1_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_13__0_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_12__7_.SD ,  `CELL0IN16 }

   `define CHAININ17 {`XTB_DUT_HIER.fifo_mem.mem_reg_14__3_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_14__2_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_14__1_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_14__0_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_13__7_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_13__6_.SD ,  `CELL0IN17 }

   `define CHAININ18 {`XTB_DUT_HIER.fifo_mem.mem_reg_15__2_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_15__1_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_15__0_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_14__7_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_14__6_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_14__5_.SD ,  `CELL0IN18 }

   `define CHAININ19 {`XTB_DUT_HIER.rptr_empty_near_empty_reg.SD , `XTB_DUT_HIER.rptr_empty_empty_reg.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_15__7_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_15__6_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_15__5_.SD , `XTB_DUT_HIER.fifo_mem.mem_reg_15__4_.SD ,  `CELL0IN19 }

   `define CHAININ20 {`XTB_DUT_HIER.rptr_empty_rptr_reg_1_.SD , `XTB_DUT_HIER.rptr_empty_rptr_reg_0_.SD , `XTB_DUT_HIER.rptr_empty_rbin_reg_4_.SD , `XTB_DUT_HIER.rptr_empty_rbin_reg_3_.SD , `XTB_DUT_HIER.rptr_empty_rbin_reg_2_.SD , `XTB_DUT_HIER.rptr_empty_rbin_reg_1_.SD ,  `CELL0IN20 }

   `define CHAININ21 {`XTB_DUT_HIER.sync_rst_r.dff2_reg.SD , `XTB_DUT_HIER.sync_rst_r.dff1_reg.SD , `XTB_DUT_HIER.sync_r2w.temp_reg_4_.SD , `XTB_DUT_HIER.sync_r2w.temp_reg_3_.SD , `XTB_DUT_HIER.rptr_empty_under_flow_reg.SD , `XTB_DUT_HIER.rptr_empty_rptr_reg_3_.SD ,  `CELL0IN21 }

   `define CHAININ22 {`XTB_DUT_HIER.wptr_full_wbin_reg_1_.SD , `XTB_DUT_HIER.wptr_full_wbin_reg_0_.SD , `XTB_DUT_HIER.wptr_full_over_flow_reg.SD , `XTB_DUT_HIER.wptr_full_near_full_reg.SD , `XTB_DUT_HIER.wptr_full_full_reg.SD , `XTB_DUT_HIER.sync_rst_w.dff2_reg.SD ,  `CELL0IN22 }

   `define CHAININ23 {`XTB_DUT_HIER.wptr_full_wptr_reg_3_.SD , `XTB_DUT_HIER.wptr_full_wptr_reg_2_.SD , `XTB_DUT_HIER.wptr_full_wptr_reg_1_.SD , `XTB_DUT_HIER.wptr_full_wptr_reg_0_.SD , `XTB_DUT_HIER.wptr_full_wbin_reg_4_.SD , `XTB_DUT_HIER.wptr_full_wbin_reg_3_.SD ,  `CELL0IN23 }


   task p_shift_0 ;
     input reg [SIG_IDS-1:0] idargs;
     input reg [2*CUM_WIDTH-1:0] valargs;
     integer i, j;
   begin
     if (~(idargs[56] | idargs[26] | idargs[32] | idargs[33] | idargs[34] | idargs[59] | idargs[49] | idargs[50] | idargs[51] | idargs[52] )) 
       disable p_shift_0 ; 
     if (SSHIFTS < MAXCHLEN) begin
         if (verbose >= 2) $display("XTB: (parallel) shift, at %0t  ", $time);
         resolve_wft(1);
     fork 
       begin: b1 
         #40 ;

         ser2par_force_data;
         -> strobe_scells;
         repeat (SYNC_LATENCY) #0;
         par2ser_strobe_data;

         if (idargs[49] === 1'b1) begin 
           measure_chain_out('d`test_so);
         end
         if (idargs[50] === 1'b1) begin 
           measure_chain_out('d`test_so_1);
         end
         if (idargs[51] === 1'b1) begin 
           measure_chain_out('d`test_so_2);
         end
         if (idargs[52] === 1'b1) begin 
           measure_chain_out('d`test_so_3);
         end

         if (idargs[26] === 1'b1 || idargs[32] === 1'b1 || idargs[33] === 1'b1 || idargs[34] === 1'b1) begin 
           LOD0=(LODCHP0 >> SSHIFTS ) ^ CH_INPINV[0];
           LOD1=(LODCHP1 >> SSHIFTS ) ^ CH_INPINV[1];
           LOD2=(LODCHP2 >> SSHIFTS ) ^ CH_INPINV[2];
           LOD3=(LODCHP3 >> SSHIFTS ) ^ CH_INPINV[3];
           LOD4=(LODCHP4 >> SSHIFTS ) ^ CH_INPINV[4];
           LOD5=(LODCHP5 >> SSHIFTS ) ^ CH_INPINV[5];
           LOD6=(LODCHP6 >> SSHIFTS ) ^ CH_INPINV[6];
           LOD7=(LODCHP7 >> SSHIFTS ) ^ CH_INPINV[7];
           LOD8=(LODCHP8 >> SSHIFTS ) ^ CH_INPINV[8];
           LOD9=(LODCHP9 >> SSHIFTS ) ^ CH_INPINV[9];
           LOD10=(LODCHP10 >> SSHIFTS ) ^ CH_INPINV[10];
           LOD11=(LODCHP11 >> SSHIFTS ) ^ CH_INPINV[11];
           LOD12=(LODCHP12 >> SSHIFTS ) ^ CH_INPINV[12];
           LOD13=(LODCHP13 >> SSHIFTS ) ^ CH_INPINV[13];
           LOD14=(LODCHP14 >> SSHIFTS ) ^ CH_INPINV[14];
           LOD15=(LODCHP15 >> SSHIFTS ) ^ CH_INPINV[15];
           LOD16=(LODCHP16 >> SSHIFTS ) ^ CH_INPINV[16];
           LOD17=(LODCHP17 >> SSHIFTS ) ^ CH_INPINV[17];
           LOD18=(LODCHP18 >> SSHIFTS ) ^ CH_INPINV[18];
           LOD19=(LODCHP19 >> SSHIFTS ) ^ CH_INPINV[19];
           LOD20=(LODCHP20 >> SSHIFTS ) ^ CH_INPINV[20];
           LOD21=(LODCHP21 >> SSHIFTS ) ^ CH_INPINV[21];
           LOD22=(LODCHP22 >> SSHIFTS ) ^ CH_INPINV[22];
           LOD23=(LODCHP23 >> SSHIFTS ) ^ CH_INPINV[23];

           ->force_scells; 
         end
         #0;
       end 
       begin: b2
         assign_val('d`_clk , 6'b0Z0111);
         assign_stmt(the_wft_id);
       end 
     join 
         if (idargs[26] === 1'b1 || idargs[32] === 1'b1 || idargs[33] === 1'b1 || idargs[34] === 1'b1) begin 
           ->release_scells; 
         end

         #0;
         if (sertmg == 1) begin
           v_count = v_count + PARSERINC - SSHIFTS - 1;
           for (i = 0; i < PARSERINC - SSHIFTS - 1; i = i+1) 
             complete_cycle(the_wft_id);
         end
         if (SSHIFTS > 0) shift_0(idargs, valargs, MAXCHLEN-SSHIFTS, 0) ; 

     end 
     else begin 
         shift_0(idargs, valargs, 0, 1);
     end
   end
   endtask


   always /* ParallelShiftMode */ @(force_scells) begin 
           force `CHAININ0 = LOD0;
           force `CHAININ1 = LOD1;
           force `CHAININ2 = LOD2;
           force `CHAININ3 = LOD3;
           force `CHAININ4 = LOD4;
           force `CHAININ5 = LOD5;
           force `CHAININ6 = LOD6;
           force `CHAININ7 = LOD7;
           force `CHAININ8 = LOD8;
           force `CHAININ9 = LOD9;
           force `CHAININ10 = LOD10;
           force `CHAININ11 = LOD11;
           force `CHAININ12 = LOD12;
           force `CHAININ13 = LOD13;
           force `CHAININ14 = LOD14;
           force `CHAININ15 = LOD15;
           force `CHAININ16 = LOD16;
           force `CHAININ17 = LOD17;
           force `CHAININ18 = LOD18;
           force `CHAININ19 = LOD19;
           force `CHAININ20 = LOD20;
           force `CHAININ21 = LOD21;
           force `CHAININ22 = LOD22;
           force `CHAININ23 = LOD23;

   end


   always /* ParallelShiftMode */ @(release_scells) begin 
     release `CHAININ0;  release `CHAININ1;  release `CHAININ2;  release `CHAININ3;  release `CHAININ4;  release `CHAININ5;  release `CHAININ6; 
     release `CHAININ7;  release `CHAININ8;  release `CHAININ9;  release `CHAININ10;  release `CHAININ11;  release `CHAININ12;  release `CHAININ13; 
     release `CHAININ14;  release `CHAININ15;  release `CHAININ16;  release `CHAININ17;  release `CHAININ18;  release `CHAININ19;  release `CHAININ20; 
     release `CHAININ21;  release `CHAININ22;  release `CHAININ23; 
   end

   task load_unload ;
     input reg [SIG_IDS-1:0] idargs;
     input reg [2*CUM_WIDTH-1:0] valargs;
   begin
     if (verbose >= 2) $display("XTB: Starting proc load_unload..., T=%0t, V=%0d", $time, v_count+1);

     if (xtb_sim_mode == 0 && ser_pats > 0 && cur_pat < last_pat && cur_pat == (ser_pats+first_pat)) begin
       $display("XTB: Switching into Parallel simulation mode at pattern %0d (using %0d serial shifts)", cur_pat, SSHIFTS);
       xtb_sim_mode = 1; 
     end
     if (cur_pat != prev_pat) begin
       loads = 1;
       prev_pat = cur_pat;
       if (cur_pat % rep_pat == 0)
         $display("XTB: Begin %0s scan load for pattern %0d (T=%0t, V=%0d)", xtb_sim_mode?"parallel":"serial", cur_pat, $time, v_count+1);
     end
     else begin
       loads = loads + 1;
       if (cur_pat % rep_pat == 0)
         $display("XTB: Begin %0s scan load for pattern %0d, unload %0d (T=%0t, V=%0d)", xtb_sim_mode?"parallel":"serial", cur_pat, loads, $time, v_count+1);
     end
     save_context;
     resolve_wft(1);

     assign_val('d`all_inputs , 70'b000000000000000000000000000000000001XXXXXXXXXXXXX101XXXXXXXXXXXXX11XXX);
     assign_val('d`all_outputs , 36'b111111111111111111XXXXXXXXXXXXXXXXXX);

     assign_val('d`test_se , 2'b01);
     assign_stmt(the_wft_id);

     if (xtb_sim_mode)      p_shift_0(idargs, valargs);
     else      shift_0(idargs, valargs, 0, 1);

     restore_context;
   end 
   endtask

   task multiclock_capture ;
     input reg [SIG_IDS-1:0] idargs;
     input reg [2*CUM_WIDTH-1:0] valargs;
   begin
     if (verbose >= 2) $display("XTB: Starting proc multiclock_capture..., T=%0t, V=%0d", $time, v_count+1);
     //check_sid_args("multiclock_capture",60'b1, idargs);
     save_context;
     resolve_wft(0);

     assign_val('d`all_inputs , 70'b000000000000000000000000000000000001XXXXXXXXXXXXX101XXXXXXXXXXXXX11XXX);
     assign_val('d`all_outputs , 36'b111111111111111111XXXXXXXXXXXXXXXXXX);

     assign_val('d`atpg_mode , 2'b01);
     assign_val('d`test_mode , 2'b01);
     assign_val('d`test_mode1 , 2'b01);

     if (idargs[53] === 1'b1) assign_ival('d`_pi );
     if (idargs[28] === 1'b1) assign_ival('d`atpg_mode );
     if (idargs[25] === 1'b1) assign_ival('d`\near_empty_mrgn[0]  );
     if (idargs[24] === 1'b1) assign_ival('d`\near_empty_mrgn[1]  );
     if (idargs[23] === 1'b1) assign_ival('d`\near_empty_mrgn[2]  );
     if (idargs[22] === 1'b1) assign_ival('d`\near_empty_mrgn[3]  );
     if (idargs[21] === 1'b1) assign_ival('d`\near_empty_mrgn[4]  );
     if (idargs[20] === 1'b1) assign_ival('d`\near_full_mrgn[0]  );
     if (idargs[19] === 1'b1) assign_ival('d`\near_full_mrgn[1]  );
     if (idargs[18] === 1'b1) assign_ival('d`\near_full_mrgn[2]  );
     if (idargs[17] === 1'b1) assign_ival('d`\near_full_mrgn[3]  );
     if (idargs[16] === 1'b1) assign_ival('d`\near_full_mrgn[4]  );
     if (idargs[12] === 1'b1) assign_ival('d`rclk );
     if (idargs[14] === 1'b1) assign_ival('d`ren );
     if (idargs[15] === 1'b1) assign_ival('d`rptr_clr );
     if (idargs[13] === 1'b1) assign_ival('d`rrst_n );
     if (idargs[30] === 1'b1) assign_ival('d`test_clk );
     if (idargs[29] === 1'b1) assign_ival('d`test_mode );
     if (idargs[27] === 1'b1) assign_ival('d`test_se );
     if (idargs[26] === 1'b1) assign_ival('d`test_si );
     if (idargs[0] === 1'b1) assign_ival('d`wclk );
     if (idargs[11] === 1'b1) assign_ival('d`\wdata[0]  );
     if (idargs[10] === 1'b1) assign_ival('d`\wdata[1]  );
     if (idargs[9] === 1'b1) assign_ival('d`\wdata[2]  );
     if (idargs[8] === 1'b1) assign_ival('d`\wdata[3]  );
     if (idargs[7] === 1'b1) assign_ival('d`\wdata[4]  );
     if (idargs[6] === 1'b1) assign_ival('d`\wdata[5]  );
     if (idargs[5] === 1'b1) assign_ival('d`\wdata[6]  );
     if (idargs[4] === 1'b1) assign_ival('d`\wdata[7]  );
     if (idargs[2] === 1'b1) assign_ival('d`wen );
     if (idargs[3] === 1'b1) assign_ival('d`wptr_clr );
     if (idargs[1] === 1'b1) assign_ival('d`wrst_n );
     if (idargs[31] === 1'b1) assign_ival('d`test_mode1 );
     if (idargs[32] === 1'b1) assign_ival('d`test_si_1 );
     if (idargs[33] === 1'b1) assign_ival('d`test_si_2 );
     if (idargs[34] === 1'b1) assign_ival('d`test_si_3 );
     if (idargs[55] === 1'b1) assign_ival('d`_po );
     if (idargs[44] === 1'b1) assign_ival('d`empty );
     if (idargs[43] === 1'b1) assign_ival('d`full );
     if (idargs[46] === 1'b1) assign_ival('d`near_empty );
     if (idargs[45] === 1'b1) assign_ival('d`near_full );
     if (idargs[47] === 1'b1) assign_ival('d`over_flow );
     if (idargs[42] === 1'b1) assign_ival('d`\rdata[0]  );
     if (idargs[41] === 1'b1) assign_ival('d`\rdata[1]  );
     if (idargs[40] === 1'b1) assign_ival('d`\rdata[2]  );
     if (idargs[39] === 1'b1) assign_ival('d`\rdata[3]  );
     if (idargs[38] === 1'b1) assign_ival('d`\rdata[4]  );
     if (idargs[37] === 1'b1) assign_ival('d`\rdata[5]  );
     if (idargs[36] === 1'b1) assign_ival('d`\rdata[6]  );
     if (idargs[35] === 1'b1) assign_ival('d`\rdata[7]  );
     if (idargs[49] === 1'b1) assign_ival('d`test_so );
     if (idargs[48] === 1'b1) assign_ival('d`under_flow );
     if (idargs[50] === 1'b1) assign_ival('d`test_so_1 );
     if (idargs[51] === 1'b1) assign_ival('d`test_so_2 );
     if (idargs[52] === 1'b1) assign_ival('d`test_so_3 );
     assign_stmt(the_wft_id);

     restore_context;
   end 
   endtask


   always @(start_part) begin: _burst__pattern__proc_unit

     integer nbpats, i;
     reg [5:0] nargs, na;
     reg [5:0] args;

     integer tdf;
     nbpats = 0; cur_pat = -1;
     end_pat = 0; v_count = 0; v_count_per_pat = 0;
     nbfails = 0;
     prev_pat = -2; prev_error = -2; first_pat = 0;
     diagf = 0;
     read_data;
     data_i = 1; 
     popcode = 'd0;

     if (diagm > 0) begin
       if (diagm > 2) begin
         $display("XTB Warning: wrong diagnosis mode (%0d), using default mode 1 (pattern based)", diagm);
         diagm = 1 ; 
       end  
       `ifdef tmax_diag_file 
         diag_file = `tmax_diag_file;
       `else 
         diag_file = "./max_sim/serial/TM4/pat_serial_tb.diag"; 
       `endif
       diagf = $fopen(diag_file);
       if (diagf == 0) begin
         $display("XTB Error: Unable to open diagnosis file %s (for writing). Exiting...", diag_file);
         $finish; 
       end
       if (verbose >= 1) $display("XTB: User requesting TetraMAX compliant diagnosis file: %0s", diag_file);
       $fdisplay(diagf, "// Serial scan error:       <pat#> \t<pin_name> \t<shift_index> \t(<expected_value> <simulated_value>)");
       $fdisplay(diagf, "// USF Parallel scan error: <pat#> \t<pin_name> \t<shift_index> \t(<expected_value> <simulated_value>)");
       $fdisplay(diagf, "// DSF Parallel scan error: <pat#> \t<chain_name> \t<cell_index> \t(<expected_value> <simulated_value>)");
       $fdisplay(diagf, "// Capture error:           <pat#> \t<pin_name> \t(<expected_value> <simulated_value>)");
       $fdisplay(diagf, "// Cycle based error:          C \t<pin_name> \t<vect_nbr> \t(<expected_value> <simulated_value>)\n\n");

     end 

     memel = memall[data_i]; 
     total_pats = memel[31:0];
     data_i=data_i+1;

     last_pat = -1;

     if (total_pats < 0 || |(total_pats) === 1'bx) begin
       $display("XTB Error: Inconsistent total number of patterns (%d). Exiting...",  total_pats);
       $finish;
     end

     if (verbose >= 1) $display("XTB: Total number of patterns  %0d",  total_pats); 
     if (last_pat == -1) last_pat = total_pats - 1;

     `ifdef tmax_n_pattern_sim
     last_pat=`tmax_n_pattern_sim;
     `endif

     `ifdef tmax_test_setup_only_once
     test_setup_only_once = 1;
     `endif

     xtb_sim_mode = 0;
     SSHIFTS = DFSHIFTS;

     ser_pats = last_pat + 1;
     csim_op = -1;

     `ifdef tmax_serial
       if (~(`tmax_serial & 1'b1) == 1'b0) 
         ser_pats = last_pat + 1;
       else 
         ser_pats = `tmax_serial + 0;
       if (ser_pats > 0)
       csim_op = 0;
       `ifdef tmax_parallel 
         if (~(`tmax_parallel & 1'b1) == 1'b0) SSHIFTS = DFSHIFTS;
         else SSHIFTS = `tmax_parallel + 0; 
         if (ser_pats  >= last_pat + 1) begin	 
           csim_op = 2; 
         end 
         else if (ser_pats == 0)
           csim_op = 1;
       `endif
     `else 
       `ifdef tmax_parallel
         csim_op = 1;
         if (~(`tmax_parallel & 1'b1) == 1'b0) SSHIFTS = DFSHIFTS;
         else SSHIFTS = `tmax_parallel + 0; 
       `endif 
     `endif
     if (SSHIFTS < 0) begin
       $display("XTB Error: Passing negative value (%0d) of serial shifts in parallel mode. Exiting...",  SSHIFTS);
       $finish; 
     end

     process_rtops;
     `ifdef tmax_serial_timing 
       sertmg = 1;
       if (xtb_sim_mode == 1) $display("XTB: Parallel simulation (timing and vector) extended to match serial simulation");
     `else 
       sertmg = 0; 
     `endif


     $display("XTB: Starting %0s simulation of %0d pattern%s", xtb_sim_mode == 0 ? "serial" : "parallel", xtb_sim_mode == 0 ? ((ser_pats>last_pat || ser_pats==0)?(last_pat+1):ser_pats): last_pat + 1, (xtb_sim_mode!=0 || ser_pats>1)?"s":"");
     if (xtb_sim_mode) begin 
       $display("XTB: Using %0d serial shifts", SSHIFTS);
     end

     if (SSHIFTS >= MAXCHLEN)  begin 
       $display("XTB Warning: serial shifts (%0d) equals or exceeds max chain length (%0d). Performing full serial scan... ", SSHIFTS, MAXCHLEN); 
       xtb_sim_mode = 0;	
     end 

     if (diagm==2 && xtb_sim_mode==1)  begin 
       $display("XTB Warning: cannot display cycle-based diagnostic messages in parallel load mode simulation. Simulation will display pattern-based diagnostic messages."); 
       diagm = 1;	
     end 

     while (cur_pat <= last_pat && end_pat != 1) begin 
       memel = memall[data_i];
       opcode = memel[15:0];
       cur_stmt = -1;
       args = 'b0;
       case (opcode)
         'd`EndPat:  begin
                       cur_stmt = `EndPat;
                       end_pat = 1;
                     end
         'd`IncPat:  begin
                       cur_stmt = `IncPat;
                       cur_pat = cur_pat + 1;
                       v_count_per_pat = 0;
                       nbpats = nbpats+1;

                     end
         'd`SetValidStrobe:  begin
                       cur_stmt = `SetValidStrobe;
                     end
         'd`SetForceSI:  begin
                       cur_stmt = `SetForceSI;
                     end
         'd`SetPat:  begin
                       cur_stmt = `SetPat;
                       if (cur_pat==-1) begin first_pat = memel[43:16]; cur_pat = first_pat; end
                       else cur_pat = memel[43:16];
                       v_count_per_pat = 0;
                       last_pat = last_pat + cur_pat; 
                       nbpats = nbpats+1;  
                     end
         'd`WFTStmt: begin
                       cur_stmt = `WFTStmt;
                       resolve_wft(memel[17:16]);
                     end 
         'd`ConditionStmt, 'd`FixedStmt, 'd`VectorStmt: begin
           if (opcode == 'd`ConditionStmt) cur_stmt = 'd`ConditionStmt;
           else 	cur_stmt='d`VectorStmt;
           nargs = memel[21:16];
           na = 0;
           while (na<nargs) begin
             data_i = data_i + 1;
             memel = memall[data_i];
             assign_val(memel[SIG_IDS_W-1:0], memel[2*MAX_WIDTH+SIG_IDS_W-1:SIG_IDS_W]);
             na = na + 1;
           end
           if (opcode == `VectorStmt) assign_stmt(the_wft_id);
          end 
          'd`GenLoopStmt: begin: GenLoop_BLOCK
            cur_stmt = `GenLoopStmt;
            lp_count = 1;
            lp_addr = data_i;
            lp_max = memel[31:16];
            $display("\nXTB: starting loop statement with %0d iterations", lp_max); 
          end 
          'd`EndGenLoopStmt: begin: EndLoop_BLOCK
            cur_stmt = `EndGenLoopStmt;
            $display("\nXTB: loop iteration %0d/%0d done.", lp_count, lp_max);
            lp_count = lp_count+1;
            if (lp_count <= lp_max) begin
              data_i = lp_addr;
            end 
         end 
         'd`test_setupStmt: begin: test_setup_BLOCK
           cur_stmt = `test_setupStmt;
           set_args(memel[21:16]);
           test_setup(sid_args, sval_args);
         end 
         'd`load_unloadStmt: begin: load_unload_BLOCK
           cur_stmt = `load_unloadStmt;
            na = 0; nargs = 'b0; sid_args = 'b0; sval_args = 'b0;
            nargs = memel[21:16];
            while (na < nargs) begin
              data_i = data_i + 1;
              memel = memall[data_i];
              if (memel[SIG_IDS_W-1:0] > SIG_IDS-1) begin
                $display("\nXTB Error: Passing wrong signal ID (%b), valid range is 1..%d. Exiting...", memel[SIG_IDS_W-1:0], SIG_IDS-1);
                $finish;
              end
              sid_args[memel[SIG_IDS_W-1:0]] = 1'b1;
              case (memel[SIG_IDS_W-1:0])
               'd`test_si: begin LOAD[0] = memel[MAXCHLEN-1+SIG_IDS_W:SIG_IDS_W]; end 
               'd`test_si_1: begin LOAD[1] = memel[MAXCHLEN-1+SIG_IDS_W:SIG_IDS_W]; end 
               'd`test_si_2: begin LOAD[2] = memel[MAXCHLEN-1+SIG_IDS_W:SIG_IDS_W]; end 
               'd`test_si_3: begin LOAD[3] = memel[MAXCHLEN-1+SIG_IDS_W:SIG_IDS_W]; end 
               'd`test_so: begin UNLOAD[0] = memel[MAXCHLEN-1+SIG_IDS_W:SIG_IDS_W]; end 
               'd`test_so_1: begin UNLOAD[1] = memel[MAXCHLEN-1+SIG_IDS_W:SIG_IDS_W]; end 
               'd`test_so_2: begin UNLOAD[2] = memel[MAXCHLEN-1+SIG_IDS_W:SIG_IDS_W]; end 
               'd`test_so_3: begin UNLOAD[3] = memel[MAXCHLEN-1+SIG_IDS_W:SIG_IDS_W]; end 
               default: begin  
                 $display("\nXTB Error: Wrong signal argument (%s) passed to load_unload procedure. Exiting...", SignalIDName[memel[SIG_IDS_W-1:0]]);
                 $finish; 
               end 
             endcase 
             na = na+1;
           end
           load_unload(sid_args, sval_args);
         end 
         'd`multiclock_captureStmt: begin: multiclock_capture_BLOCK
           cur_stmt = `multiclock_captureStmt;
           set_args(memel[21:16]);
           multiclock_capture(sid_args, sval_args);
         end 
         default: begin $display("\nXTB Error: Unrecognized code %0h, @ inst %0d", opcode, data_i); $finish; end 
       endcase 
       data_i = data_i + 1;
       popcode = opcode;
       if (verbose >= 3) display_stmt(cur_stmt);
     end 
     $display("XTB: Simulation of %0d pattern%s completed with %0d mismatch%s (time: %0t, cycles: %0d)\n", nbpats+end_pat-1, (nbpats==1)?"":"s", nbfails, (nbfails==1)?"":"es", $time, v_count); 

     if (diagf) $fclose(diagf);
     ->end_part;
   end 


   task init_rtops;
     integer i;
   begin
     for (i=0; i<`NBRTOPS; i=i+1)
       rt_ops[i] = -1;
     RT_OPS [0] = "tmax_n_pattern_sim"; RT_OPS [1] = "tmax_serial"; RT_OPS [2] = "tmax_parallel"; RT_OPS [3] = "tmax_msg"; RT_OPS [4] = "tmax_rpt"; RT_OPS [5] = "tmax_test_setup_only_once"; RT_OPS [6] = "tmax_usf_debug_strobe_mode"; 
   end 
   endtask

   task process_rtops;
     integer sim_op, p_mode;
     integer i, r;
   begin
     sim_op = -1;
     init_rtops;
     for (i=0; i<`NBRTOPS; i=i+1)
       r = $value$plusargs ({RT_OPS[i], "=%d"}, rt_ops[i]);
     if ((rt_ops[0] > -1))   last_pat =  rt_ops[0];
     if (last_pat != total_pats-1) begin
       display_ops ((rt_ops[0] > 0), last_pat, RT_OPS[0]);
       $display("XTB: User requesting simulating patterns 0 to %0d",last_pat);
     end 
     if (last_pat >= total_pats && total_pats > 1) begin
       $display("XTB Error: Simulation patterns (%0d) exceeds total pattern count (%0d). Exiting...",  last_pat+1,total_pats);
       $finish;
     end 
     else if (last_pat < 0 && total_pats != 0)  begin 
       $display("XTB Error: User requesting simulating wrong number of patterns (%0d). Exiting... ",last_pat+1);
       $finish;
     end
     if (rt_ops[5] != 0 && ($test$plusargs ("tmax_test_setup_only_once"))) begin
       test_setup_only_once = 1;
       rt_ops[5] = 1;
     end
     if ((rt_ops[1] > 0)) begin
       if (rt_ops[1]==0) ser_pats = last_pat + 1;
       else ser_pats = rt_ops[1];
       sim_op = 0;
     end 
     else if (rt_ops[1] != 0 &&  ($test$plusargs ("tmax_serial"))) begin
       ser_pats = last_pat + 1;
       rt_ops[1] = ser_pats;
       sim_op = 0;
     end
     if ((rt_ops[1]>0) || (csim_op==0 || csim_op==2)) display_ops ((rt_ops[1]>0), ser_pats, RT_OPS[1]);
     p_mode = ((rt_ops[2] > -1) || ($test$plusargs ("tmax_parallel")))?1:0;
     if (p_mode) begin
       SSHIFTS = (rt_ops[2] > -1)?rt_ops[2]:DFSHIFTS;
       if (sim_op == -1)
         sim_op = 1;
       else  if (ser_pats  < last_pat + 1)
         sim_op = 0;
       else 
         sim_op = 2;
     end 
     if (p_mode || (csim_op==1 || csim_op==2)) display_ops (p_mode, SSHIFTS, RT_OPS[2]);
     if (sim_op > -1)
       set_sim_ops (sim_op);
     else if (csim_op > -1)
       set_sim_ops (csim_op);
     if (rt_ops[3] > -1) begin
       verbose = rt_ops[3];
     end
     if (verbose != 0) 
       display_ops ((rt_ops[3]>-1), verbose, RT_OPS[3]);
     if (rt_ops[4] > -1) begin
       rep_pat =  rt_ops[4];
     end
     if (rep_pat != 5) 
       display_ops ((rt_ops[4]>-1), rep_pat, RT_OPS[4]);
      if (test_setup_only_once > 0) begin
        display_ops ((rt_ops[5]>-1), test_setup_only_once, RT_OPS[5]);
      end
   end 
   endtask

   task display_ops;
     input reg rt;
     input integer val;
     input reg [32*8:1] opname;
   begin
     $display("XTB: Setting %0s option \"%0s\" to %0d.", (rt==1)?"runtime":"compile-time",  opname, val);
   end 
   endtask

   task display_help;
   integer op;
   begin
     init_rtops;
     $display("\n\n\t\t----------------------- Runtime Help ------------------------------\n");
     $display("XTB: Usage is: <sim_exec> +opt1=val1 +opt2=val2...");
     $display("     where  <sim_exec> is the simulation exec name, and opt1 opt2 are available options and val1, val2 their corresponding values.");
     $display("     Available runtime options are:");
     op = 0;
     while (op < `NBRTOPS) begin
       $display("        +%0s", RT_OPS[op]);
       op = op + 1;
     end
     $display("\n      E.g.: simv +tmax_serial=2 +tmax_msg=2, runs first 2 patterns in serial and remaining in parallel, and set the verbose msg level to 2.");
     $display("\n Note: Runtime options override corresponding compile-time options.");
     $display("\n       Please refer to the User's Guide for details regarding each option.");
     $display("\n\t\t-------------------------------------------------------------------\n");
   end 
   endtask

   task set_sim_ops;
     input integer smode;
   begin
     if (smode==0) begin 
       xtb_sim_mode = 0;
       $write("XTB: Enabling serial simulation for");
       if (ser_pats < last_pat + 1) begin
         if (ser_pats==1) $write(" the first pattern.\n");
         else $write(" first %0d patterns.\n", ser_pats);
       end else 
         $write(" all patterns.\n");
     end
     else if (smode==1) begin 
       $write("XTB: Enabling parallel simulation with %0d serial shift(s).\n", SSHIFTS);
       xtb_sim_mode = 1;
     end 
     else  if (smode==2) begin
       $display("XTB Warning: requesting full serial simulation and full parallel simulation in the same time. Performing default parallel simulation mode...");
       xtb_sim_mode = 1;
     end 
   end 
   endtask


   initial begin: _burst__pattern__init_unit

     `ifdef tmax_fsdb
       $fsdbDumpvars;
     `endif


     for (n=0; n<SIG_IDS; n=n+1) SignalIDWidth[n] = 0;
     SignalIDName[0] = "wclk";
     SignalIDType[0] = 0; //wclk
     SignalIDWidth[0] = 1; //wclk
     SignalIDName[1] = "wrst_n";
     SignalIDType[1] = 0; //wrst_n
     SignalIDWidth[1] = 1; //wrst_n
     SignalIDName[2] = "wen";
     SignalIDType[2] = 0; //wen
     SignalIDWidth[2] = 1; //wen
     SignalIDName[3] = "wptr_clr";
     SignalIDType[3] = 0; //wptr_clr
     SignalIDWidth[3] = 1; //wptr_clr
     SignalIDName[4] = "wdata[7]";
     SignalIDType[4] = 0; //\wdata[7] 
     SignalIDWidth[4] = 1; //\wdata[7] 
     SignalIDName[5] = "wdata[6]";
     SignalIDType[5] = 0; //\wdata[6] 
     SignalIDWidth[5] = 1; //\wdata[6] 
     SignalIDName[6] = "wdata[5]";
     SignalIDType[6] = 0; //\wdata[5] 
     SignalIDWidth[6] = 1; //\wdata[5] 
     SignalIDName[7] = "wdata[4]";
     SignalIDType[7] = 0; //\wdata[4] 
     SignalIDWidth[7] = 1; //\wdata[4] 
     SignalIDName[8] = "wdata[3]";
     SignalIDType[8] = 0; //\wdata[3] 
     SignalIDWidth[8] = 1; //\wdata[3] 
     SignalIDName[9] = "wdata[2]";
     SignalIDType[9] = 0; //\wdata[2] 
     SignalIDWidth[9] = 1; //\wdata[2] 
     SignalIDName[10] = "wdata[1]";
     SignalIDType[10] = 0; //\wdata[1] 
     SignalIDWidth[10] = 1; //\wdata[1] 
     SignalIDName[11] = "wdata[0]";
     SignalIDType[11] = 0; //\wdata[0] 
     SignalIDWidth[11] = 1; //\wdata[0] 
     SignalIDName[12] = "rclk";
     SignalIDType[12] = 0; //rclk
     SignalIDWidth[12] = 1; //rclk
     SignalIDName[13] = "rrst_n";
     SignalIDType[13] = 0; //rrst_n
     SignalIDWidth[13] = 1; //rrst_n
     SignalIDName[14] = "ren";
     SignalIDType[14] = 0; //ren
     SignalIDWidth[14] = 1; //ren
     SignalIDName[15] = "rptr_clr";
     SignalIDType[15] = 0; //rptr_clr
     SignalIDWidth[15] = 1; //rptr_clr
     SignalIDName[16] = "near_full_mrgn[4]";
     SignalIDType[16] = 0; //\near_full_mrgn[4] 
     SignalIDWidth[16] = 1; //\near_full_mrgn[4] 
     SignalIDName[17] = "near_full_mrgn[3]";
     SignalIDType[17] = 0; //\near_full_mrgn[3] 
     SignalIDWidth[17] = 1; //\near_full_mrgn[3] 
     SignalIDName[18] = "near_full_mrgn[2]";
     SignalIDType[18] = 0; //\near_full_mrgn[2] 
     SignalIDWidth[18] = 1; //\near_full_mrgn[2] 
     SignalIDName[19] = "near_full_mrgn[1]";
     SignalIDType[19] = 0; //\near_full_mrgn[1] 
     SignalIDWidth[19] = 1; //\near_full_mrgn[1] 
     SignalIDName[20] = "near_full_mrgn[0]";
     SignalIDType[20] = 0; //\near_full_mrgn[0] 
     SignalIDWidth[20] = 1; //\near_full_mrgn[0] 
     SignalIDName[21] = "near_empty_mrgn[4]";
     SignalIDType[21] = 0; //\near_empty_mrgn[4] 
     SignalIDWidth[21] = 1; //\near_empty_mrgn[4] 
     SignalIDName[22] = "near_empty_mrgn[3]";
     SignalIDType[22] = 0; //\near_empty_mrgn[3] 
     SignalIDWidth[22] = 1; //\near_empty_mrgn[3] 
     SignalIDName[23] = "near_empty_mrgn[2]";
     SignalIDType[23] = 0; //\near_empty_mrgn[2] 
     SignalIDWidth[23] = 1; //\near_empty_mrgn[2] 
     SignalIDName[24] = "near_empty_mrgn[1]";
     SignalIDType[24] = 0; //\near_empty_mrgn[1] 
     SignalIDWidth[24] = 1; //\near_empty_mrgn[1] 
     SignalIDName[25] = "near_empty_mrgn[0]";
     SignalIDType[25] = 0; //\near_empty_mrgn[0] 
     SignalIDWidth[25] = 1; //\near_empty_mrgn[0] 
     SignalIDName[26] = "test_si";
     SignalIDType[26] = 0; //test_si
     SignalIDWidth[26] = 1; //test_si
     SignalIDName[27] = "test_se";
     SignalIDType[27] = 0; //test_se
     SignalIDWidth[27] = 1; //test_se
     SignalIDName[28] = "atpg_mode";
     SignalIDType[28] = 0; //atpg_mode
     SignalIDWidth[28] = 1; //atpg_mode
     SignalIDName[29] = "test_mode";
     SignalIDType[29] = 0; //test_mode
     SignalIDWidth[29] = 1; //test_mode
     SignalIDName[30] = "test_clk";
     SignalIDType[30] = 0; //test_clk
     SignalIDWidth[30] = 1; //test_clk
     SignalIDName[31] = "test_mode1";
     SignalIDType[31] = 0; //test_mode1
     SignalIDWidth[31] = 1; //test_mode1
     SignalIDName[32] = "test_si_1";
     SignalIDType[32] = 0; //test_si_1
     SignalIDWidth[32] = 1; //test_si_1
     SignalIDName[33] = "test_si_2";
     SignalIDType[33] = 0; //test_si_2
     SignalIDWidth[33] = 1; //test_si_2
     SignalIDName[34] = "test_si_3";
     SignalIDType[34] = 0; //test_si_3
     SignalIDWidth[34] = 1; //test_si_3
     SignalIDName[35] = "rdata[7]";
     SignalIDType[35] = 1; //\rdata[7] 
     SignalIDWidth[35] = 1; //\rdata[7] 
     SignalIDName[36] = "rdata[6]";
     SignalIDType[36] = 1; //\rdata[6] 
     SignalIDWidth[36] = 1; //\rdata[6] 
     SignalIDName[37] = "rdata[5]";
     SignalIDType[37] = 1; //\rdata[5] 
     SignalIDWidth[37] = 1; //\rdata[5] 
     SignalIDName[38] = "rdata[4]";
     SignalIDType[38] = 1; //\rdata[4] 
     SignalIDWidth[38] = 1; //\rdata[4] 
     SignalIDName[39] = "rdata[3]";
     SignalIDType[39] = 1; //\rdata[3] 
     SignalIDWidth[39] = 1; //\rdata[3] 
     SignalIDName[40] = "rdata[2]";
     SignalIDType[40] = 1; //\rdata[2] 
     SignalIDWidth[40] = 1; //\rdata[2] 
     SignalIDName[41] = "rdata[1]";
     SignalIDType[41] = 1; //\rdata[1] 
     SignalIDWidth[41] = 1; //\rdata[1] 
     SignalIDName[42] = "rdata[0]";
     SignalIDType[42] = 1; //\rdata[0] 
     SignalIDWidth[42] = 1; //\rdata[0] 
     SignalIDName[43] = "full";
     SignalIDType[43] = 1; //full
     SignalIDWidth[43] = 1; //full
     SignalIDName[44] = "empty";
     SignalIDType[44] = 1; //empty
     SignalIDWidth[44] = 1; //empty
     SignalIDName[45] = "near_full";
     SignalIDType[45] = 1; //near_full
     SignalIDWidth[45] = 1; //near_full
     SignalIDName[46] = "near_empty";
     SignalIDType[46] = 1; //near_empty
     SignalIDWidth[46] = 1; //near_empty
     SignalIDName[47] = "over_flow";
     SignalIDType[47] = 1; //over_flow
     SignalIDWidth[47] = 1; //over_flow
     SignalIDName[48] = "under_flow";
     SignalIDType[48] = 1; //under_flow
     SignalIDWidth[48] = 1; //under_flow
     SignalIDName[49] = "test_so";
     SignalIDType[49] = 1; //test_so
     SignalIDWidth[49] = 1; //test_so
     SignalIDName[50] = "test_so_1";
     SignalIDType[50] = 1; //test_so_1
     SignalIDWidth[50] = 1; //test_so_1
     SignalIDName[51] = "test_so_2";
     SignalIDType[51] = 1; //test_so_2
     SignalIDWidth[51] = 1; //test_so_2
     SignalIDName[52] = "test_so_3";
     SignalIDType[52] = 1; //test_so_3
     SignalIDWidth[52] = 1; //test_so_3
     SignalIDName[53] = "_pi";
     SignalIDType[53] = 3; //_pi
     SignalIDWidth[53] = 35; //_pi
     SignalIDName[54] = "all_inputs";
     SignalIDType[54] = 3; //all_inputs
     SignalIDWidth[54] = 35; //all_inputs
     SignalIDName[55] = "_po";
     SignalIDType[55] = 3; //_po
     SignalIDWidth[55] = 18; //_po
     SignalIDName[56] = "_si";
     SignalIDType[56] = 3; //_si
     SignalIDWidth[56] = 4; //_si
     SignalIDName[57] = "all_outputs";
     SignalIDType[57] = 3; //all_outputs
     SignalIDWidth[57] = 18; //all_outputs
     SignalIDName[58] = "_clk";
     SignalIDType[58] = 3; //_clk
     SignalIDWidth[58] = 3; //_clk
     SignalIDName[59] = "_so";
     SignalIDType[59] = 3; //_so
     SignalIDWidth[59] = 4; //_so
     WFTIDName[0] = "_multiclock_capture_WFT_";
     WFTIDName[1] = "_default_WFT_";
     StmtNames[0] = "EndPat";
     StmtNames[1] = "IncPat";
     StmtNames[2] = "SetPat";
     StmtNames[3] = "WFTStmt";
     StmtNames[4] = "ConditionStmt";
     StmtNames[5] = "VectorStmt";
     StmtNames[6] = "FixedStmt";
     StmtNames[7] = "GenLoopStmt";
     StmtNames[8] = "EndGenLoopStmt";
     StmtNames[9] = "GenTestSetupStmt";
     StmtNames[10] = "EndGenTestSetupStmt";
     StmtNames[11] = "SetForceSI";
     StmtNames[12] = "SetValidStrobe";
     StmtNames[13] = "AnnotationStmt";
     StmtNames[14] = "test_setupStmt";
     StmtNames[15] = "load_unloadStmt";
     StmtNames[16] = "multiclock_captureStmt";

     $display("%s",`MAXTB_H_S);
     $display("%s",`MAXTB_HEADER);
     $display(" Enhanced Runtime Version: use <sim_exec> +tmax_help for available runtime options");
     $display("%s\n",`MAXTB_H_S);

     if ( $test$plusargs ("tmax_help") ) begin
       display_help;
       $finish(0);
     end

     $timeformat(-9,2," ns",19);

     `ifdef tmax_test_data_file 
       tdfm = 1;
       TDATA_FILE = `tmax_test_data_file ;
     `else
       tdfm = 0;
       TDATA_FILE = `TDATA_FILE ;
     `endif


     `ifdef tmax_vcde
       $display("XTB: Dumping Extended VCD information in file \"./max_sim/serial/TM4/pat_serial_tb.vcd\"");
       $dumpports(`XTB_DUT_HIER, "./max_sim/serial/TM4/pat_serial_tb.vcd");
     `endif

     `ifdef tmax_msg
       verbose = `tmax_msg ;
     `else
       verbose = 0 ;
     `endif

     `ifdef tmax_debug
     if (~(`tmax_debug & 1'b1) == 1'b0)
       debug = 1;
     else
       debug = `tmax_debug + 0 ;
     `else
     debug = 0 ;
     `endif

     `ifdef tmax_rpt
     rep_pat = `tmax_rpt ;
     `else
     rep_pat = 5 ;
     `endif

     test_setup_runs = 0;

     CH_OUTINV[0] = 9'b000000000;
     CH_INPINV[0] = 9'b000000000;
     CH_OUTINV[1] = 9'b000000000;
     CH_INPINV[1] = 9'b000000000;
     CH_OUTINV[2] = 9'b000000000;
     CH_INPINV[2] = 9'b000000000;
     CH_OUTINV[3] = 9'b000000000;
     CH_INPINV[3] = 9'b000000000;
     CH_OUTINV[4] = 9'b000000000;
     CH_INPINV[4] = 9'b000000000;
     CH_OUTINV[5] = 9'b000000000;
     CH_INPINV[5] = 9'b000000000;
     CH_OUTINV[6] = 9'b000000000;
     CH_INPINV[6] = 9'b000000000;
     CH_OUTINV[7] = 9'b000000000;
     CH_INPINV[7] = 9'b000000000;
     CH_OUTINV[8] = 9'b000000000;
     CH_INPINV[8] = 9'b000000000;
     CH_OUTINV[9] = 9'b000000000;
     CH_INPINV[9] = 9'b000000000;
     CH_OUTINV[10] = 9'b000000000;
     CH_INPINV[10] = 9'b000000000;
     CH_OUTINV[11] = 9'b000000000;
     CH_INPINV[11] = 9'b000000000;
     CH_OUTINV[12] = 9'b000000000;
     CH_INPINV[12] = 9'b000000000;
     CH_OUTINV[13] = 9'b000000000;
     CH_INPINV[13] = 9'b000000000;
     CH_OUTINV[14] = 9'b000000000;
     CH_INPINV[14] = 9'b000000000;
     CH_OUTINV[15] = 9'b000000000;
     CH_INPINV[15] = 9'b000000000;
     CH_OUTINV[16] = 9'b000000000;
     CH_INPINV[16] = 9'b000000000;
     CH_OUTINV[17] = 9'b000000000;
     CH_INPINV[17] = 9'b000000000;
     CH_OUTINV[18] = 9'b000000000;
     CH_INPINV[18] = 9'b000000000;
     CH_OUTINV[19] = 9'b000000000;
     CH_INPINV[19] = 9'b000000000;
     CH_OUTINV[20] = 9'b000000000;
     CH_INPINV[20] = 9'b000000000;
     CH_OUTINV[21] = 9'b000000000;
     CH_INPINV[21] = 9'b000000000;
     CH_OUTINV[22] = 9'b000000000;
     CH_INPINV[22] = 9'b000000000;
     CH_OUTINV[23] = 9'b000000000;
     CH_INPINV[23] = 9'b000000000;

     diagm = 0;
     diag_file = "";

     `ifdef tmax_diag 
       diagm = `tmax_diag;
     `endif

     -> start_part;
     @(end_part) #0;
     $finish(0);

   end

 endmodule

module MaxTB_DECOMPRESSOR (test_si, test_si_1, test_si_2, test_si_3 , dout);

input  test_si, test_si_1, test_si_2, test_si_3;
output [0:23] dout;
reg    [0:23] dout;

  always @(test_si or test_si_1 or test_si_2 or test_si_3)
    begin
     if ({test_si_2, test_si_3} == 2'b00) begin
        dout[0] = test_si; /* 1 */
        dout[3] = test_si; /* 4 */
        dout[5] = test_si; /* 6 */
        dout[6] = test_si; /* 7 */
        dout[8] = test_si; /* 9 */
        dout[11] = test_si; /* 12 */
        dout[13] = test_si; /* 14 */
        dout[14] = test_si; /* 15 */
        dout[16] = test_si; /* 17 */
        dout[19] = test_si; /* 20 */
        dout[21] = test_si; /* 22 */
        dout[22] = test_si; /* 23 */
        dout[1] = test_si_1; /* 2 */
        dout[2] = test_si_1; /* 3 */
        dout[4] = test_si_1; /* 5 */
        dout[7] = test_si_1; /* 8 */
        dout[9] = test_si_1; /* 10 */
        dout[10] = test_si_1; /* 11 */
        dout[12] = test_si_1; /* 13 */
        dout[15] = test_si_1; /* 16 */
        dout[17] = test_si_1; /* 18 */
        dout[18] = test_si_1; /* 19 */
        dout[20] = test_si_1; /* 21 */
        dout[23] = test_si_1; /* 24 */
        end
     else if ({test_si_2, test_si_3} == 2'b01) begin
        dout[0] = test_si; /* 1 */
        dout[2] = test_si; /* 3 */
        dout[5] = test_si; /* 6 */
        dout[7] = test_si; /* 8 */
        dout[9] = test_si; /* 10 */
        dout[11] = test_si; /* 12 */
        dout[12] = test_si; /* 13 */
        dout[14] = test_si; /* 15 */
        dout[16] = test_si; /* 17 */
        dout[18] = test_si; /* 19 */
        dout[21] = test_si; /* 22 */
        dout[23] = test_si; /* 24 */
        dout[1] = test_si_1; /* 2 */
        dout[3] = test_si_1; /* 4 */
        dout[4] = test_si_1; /* 5 */
        dout[6] = test_si_1; /* 7 */
        dout[8] = test_si_1; /* 9 */
        dout[10] = test_si_1; /* 11 */
        dout[13] = test_si_1; /* 14 */
        dout[15] = test_si_1; /* 16 */
        dout[17] = test_si_1; /* 18 */
        dout[19] = test_si_1; /* 20 */
        dout[20] = test_si_1; /* 21 */
        dout[22] = test_si_1; /* 23 */
        end
     else if ({test_si_2, test_si_3} == 2'b10) begin
        dout[0] = test_si; /* 1 */
        dout[2] = test_si; /* 3 */
        dout[4] = test_si; /* 5 */
        dout[6] = test_si; /* 7 */
        dout[9] = test_si; /* 10 */
        dout[11] = test_si; /* 12 */
        dout[13] = test_si; /* 14 */
        dout[15] = test_si; /* 16 */
        dout[17] = test_si; /* 18 */
        dout[19] = test_si; /* 20 */
        dout[21] = test_si; /* 22 */
        dout[23] = test_si; /* 24 */
        dout[1] = test_si_1; /* 2 */
        dout[3] = test_si_1; /* 4 */
        dout[5] = test_si_1; /* 6 */
        dout[7] = test_si_1; /* 8 */
        dout[8] = test_si_1; /* 9 */
        dout[10] = test_si_1; /* 11 */
        dout[12] = test_si_1; /* 13 */
        dout[14] = test_si_1; /* 15 */
        dout[16] = test_si_1; /* 17 */
        dout[18] = test_si_1; /* 19 */
        dout[20] = test_si_1; /* 21 */
        dout[22] = test_si_1; /* 23 */
        end
     else if ({test_si_2, test_si_3} == 2'b11) begin
        dout[0] = test_si; /* 1 */
        dout[2] = test_si; /* 3 */
        dout[4] = test_si; /* 5 */
        dout[6] = test_si; /* 7 */
        dout[8] = test_si; /* 9 */
        dout[10] = test_si; /* 11 */
        dout[12] = test_si; /* 13 */
        dout[14] = test_si; /* 15 */
        dout[16] = test_si; /* 17 */
        dout[18] = test_si; /* 19 */
        dout[20] = test_si; /* 21 */
        dout[22] = test_si; /* 23 */
        dout[1] = test_si_1; /* 2 */
        dout[3] = test_si_1; /* 4 */
        dout[5] = test_si_1; /* 6 */
        dout[7] = test_si_1; /* 8 */
        dout[9] = test_si_1; /* 10 */
        dout[11] = test_si_1; /* 12 */
        dout[13] = test_si_1; /* 14 */
        dout[15] = test_si_1; /* 16 */
        dout[17] = test_si_1; /* 18 */
        dout[19] = test_si_1; /* 20 */
        dout[21] = test_si_1; /* 22 */
        dout[23] = test_si_1; /* 24 */
        end
     else begin
        dout = 24'b000000000000000000000000;
        end
  end

endmodule

module MaxTB_COMPRESSOR (din, test_so, test_so_1, test_so_2, test_so_3);

input  [0:23]  din;
output test_so, test_so_1, test_so_2, test_so_3;
reg    test_so, test_so_1, test_so_2, test_so_3;

  always @(din)
    begin
      test_so = din[0] ^ din[3] ^ din[7] ^ din[11] ^ din[15] ^ din[18] ^ din[20] ^ din[22];
      test_so_1 = din[0] ^ din[4] ^ din[8] ^ din[12] ^ din[16] ^ din[18] ^ din[20] ^ din[22];
      test_so_2 = din[1] ^ din[5] ^ din[9] ^ din[13] ^ din[17] ^ din[19] ^ din[21] ^ din[23];
      test_so_3 = din[2] ^ din[6] ^ din[10] ^ din[14] ^ din[17] ^ din[19] ^ din[21] ^ din[23];
      end

endmodule

 module async_fifo_test_SDF_ANN;
   initial $sdf_annotate("./sdf/async_fifo.sdf", async_fifo_test.dut);
 endmodule
